import logging
import re
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
# –í–ê–ñ–õ–ò–í–û: –ù–ï –í–ò–ö–û–†–ò–°–¢–û–í–£–ô–¢–ï –¶–ï –ù–ê –ü–†–û–î–ê–ö–®–ï–ù–Ü!
BOT_TOKEN = "7652276422:AAGC-z7Joic3m7cFKXVdafvKvaqTZ3VZsBo"  # –í–∞—à —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
ADMIN_IDS = [1648720935]  # –í–∞—à ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
GROUP_CHAT_ID = None  # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É - –æ—Ç–∫–ª—é—á–µ–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫
GROUP_INVITE_LINK = "https://t.me/+RItcaiRa-KU5ZThi"  # –û—Å–Ω–æ–≤–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è —Ç–µ—Å—Ç—ñ–≤

# –°—Ç–∞–Ω–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
PENDING_REQUESTS = {}
USER_APPLICATIONS = {}  # –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑–∞—è–≤–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤

def is_valid_image_url(url: str) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î URL –≤–∞–ª—ñ–¥–Ω–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
    # –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É URL
    url_pattern = re.compile(
        r'^https?://'  # http:// –∞–±–æ https://
        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+[A-Z]{2,6}\.?|'  # –¥–æ–º–µ–Ω
        r'localhost|'  # localhost
        r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'  # IP
        r'(?::\d+)?'  # –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –ø–æ—Ä—Ç
        r'(?:/?|[/?]\S+)$', re.IGNORECASE)
    
    if not url_pattern.match(url):
        return False
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É
    image_extensions = ('.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp')
    if any(url.lower().endswith(ext) for ext in image_extensions):
        return True
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–ø—É–ª—è—Ä–Ω—ñ —Ö–æ—Å—Ç–∏–Ω–≥–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å
    image_hosts = ['imgbb.com', 'imgur.com', 'postimg.cc', 'ibb.co', 'imageban.ru', 'radikal.ru']
    if any(host in url.lower() for host in image_hosts):
        return True
    
    # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–µ—Ä–µ–∑ HTTP HEAD –∑–∞–ø–∏—Ç
    try:
        response = requests.head(url, timeout=5)
        content_type = response.headers.get('content-type', '')
        return content_type.startswith('image/')
    except:
        return False

def validate_image_urls(urls: list) -> tuple:
    """–í–∞–ª—ñ–¥—É—î —Å–ø–∏—Å–æ–∫ URL –∑–æ–±—Ä–∞–∂–µ–Ω—å"""
    valid_urls = []
    invalid_urls = []
    
    for url in urls:
        url = url.strip()
        if is_valid_image_url(url):
            valid_urls.append(url)
        else:
            invalid_urls.append(url)
    
    return valid_urls, invalid_urls

async def create_invite_link(context: ContextTypes.DEFAULT_TYPE, user_name: str) -> str:
    """–°—Ç–≤–æ—Ä—é—î –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è-–∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–¢–ï–°–¢ –†–ï–ñ–ò–ú)"""
    # –í –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ç–µ—Å—Ç—ñ –Ω–µ —Å—Ç–≤–æ—Ä—é—î–º–æ —Ä–µ–∞–ª—å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
    logger.info(f"[–¢–ï–°–¢] –°—Ç–≤–æ—Ä–µ–Ω–æ –± –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è {user_name}")
    return GROUP_INVITE_LINK

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    user = update.effective_user
    
    keyboard = [
        [InlineKeyboardButton("üìù –ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ—Å—Ç—É–ø", callback_data="request_access")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_message = (
        f"–í—ñ—Ç–∞—é, {user.first_name}! üëã\n\n"
        "–¶–µ –±–æ—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–æ –≥—Ä—É–ø–∏ –ø–æ–ª—ñ—Ü—ñ—ó UKRAINE GTA.\n\n"
        "–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –≥—Ä—É–ø–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ —Ç–∞ –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –∑–∞—è–≤–∫—É.\n\n"
        "üîß –õ–û–ö–ê–õ–¨–ù–ò–ô –¢–ï–°–¢ –†–ï–ñ–ò–ú"
    )
    
    await update.message.reply_text(welcome_message, reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "request_access":
        await query.edit_message_text(
            "üìù –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é:\n\n"
            "1. –í–∞—à–µ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ\n"
            "2. –ù–ü–£ –º—ñ—Å—Ç–∞\n\n"
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º."
        )
        context.user_data['awaiting_application'] = True
    
    elif query.data.startswith("approve_"):
        user_id = int(query.data.split("_")[1])
        await approve_request(update, context, user_id)
    
    elif query.data.startswith("reject_"):
        user_id = int(query.data.split("_")[1])
        await reject_request(update, context, user_id)

async def handle_application_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∑–∞—è–≤–æ–∫"""
    user = update.effective_user
    user_id = user.id
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
    if not context.user_data.get('awaiting_application'):
        return
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
    if user_id not in USER_APPLICATIONS:
        await handle_text_application(update, context)
    else:
        user_data = USER_APPLICATIONS[user_id]
        if user_data.get('step') == 'waiting_text':
            await handle_text_application(update, context)
        elif user_data.get('step') == 'waiting_image_urls':
            await handle_image_urls_application(update, context)

async def handle_text_application(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –∑–∞—è–≤–æ–∫ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    if not context.user_data.get('awaiting_application'):
        return

    user = update.effective_user
    user_id = user.id

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ —â–µ –Ω–µ —ñ—Å–Ω—É—î
    if user_id not in USER_APPLICATIONS:
        USER_APPLICATIONS[user_id] = {
            'user': user,
            'text': None,
            'image_urls': [],
            'step': 'waiting_text'
        }

    USER_APPLICATIONS[user_id]['text'] = update.message.text
    USER_APPLICATIONS[user_id]['step'] = 'waiting_image_urls'

    await update.message.reply_text(
        "‚úÖ –¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –æ—Ç—Ä–∏–º–∞–Ω–æ!\n\n"
        "–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏:\n"
    "1. –°–∫—Ä—ñ–Ω—à–æ—Ç –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è\n"
    "2. –°–∫—Ä—ñ–Ω—à–æ—Ç —Ç—Ä—É–¥–æ–≤–æ—ó –∫–Ω–∏–∂–∫–∏\n\n"
        "üìã –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è:\n"
        "‚Ä¢ –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏ –Ω–∞ imgbb.com, imgur.com –∞–±–æ –ø–æ–¥—ñ–±–Ω–∏–π —Å–µ—Ä–≤—ñ—Å\n"
        "‚Ä¢ –°–∫–æ–ø—ñ—é–π—Ç–µ –ø—Ä—è–º—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è\n"
        "‚Ä¢ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —ó—Ö –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º, –∫–æ–∂–Ω–µ –∑ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞\n\n"
        "–ü—Ä–∏–∫–ª–∞–¥:\n"
        "https://i.ibb.co/example1.jpg\n"
        "https://i.ibb.co/example2.png"
    )

async def handle_image_urls_application(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –∑–∞—è–≤–æ–∫"""
    user = update.effective_user
    user_id = user.id

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ –ø—Ä–æ—Ü–µ—Å—ñ –ø–æ–¥–∞—á—ñ –∑–∞—è–≤–∫–∏
    if not context.user_data.get('awaiting_application'):
        await update.message.reply_text(
            "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /start —Ç–∞ –ø–æ—á–Ω—ñ—Ç—å –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏."
        )
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –Ω–∞–¥—ñ—Å–ª–∞–≤ —Ç–µ–∫—Å—Ç
    if user_id not in USER_APPLICATIONS:
        await update.message.reply_text(
            "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏.\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É."
        )
        return

    user_data = USER_APPLICATIONS[user_id]
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –æ—á—ñ–∫—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    if user_data.get('step') != 'waiting_image_urls':
        await update.message.reply_text(
            "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏."
        )
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ —Ä–æ–∑–¥—ñ–ª—è—î–º–æ –Ω–∞ —Ä—è–¥–∫–∏
    message_text = update.message.text.strip()
    urls = [url.strip() for url in message_text.split('\n') if url.strip()]
    
    if len(urls) < 2:
        await update.message.reply_text(
            "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º—ñ–Ω—ñ–º—É–º 2 –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:\n"
            "1. –°–∫—Ä—ñ–Ω—à–æ—Ç –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è\n"
            "2. –°–∫—Ä—ñ–Ω—à–æ—Ç —Ç—Ä—É–¥–æ–≤–æ—ó –∫–Ω–∏–∂–∫–∏\n\n"
            "–ö–æ–∂–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞."
        )
        return
    
    # –í–∞–ª—ñ–¥—É—î–º–æ URL
    valid_urls, invalid_urls = validate_image_urls(urls)
    
    if invalid_urls:
        invalid_list = '\n'.join(f"‚Ä¢ {url}" for url in invalid_urls)
        await update.message.reply_text(
            f"‚ùå –î–µ—è–∫—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ:\n\n{invalid_list}\n\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Ç–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç—ñ–ª—å–∫–∏ –≤–∞–ª—ñ–¥–Ω—ñ URL –∑–æ–±—Ä–∞–∂–µ–Ω—å.\n"
            "–ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è: imgbb.com, imgur.com, postimg.cc —Ç–∞ —ñ–Ω—à—ñ."
        )
        return
    
    if len(valid_urls) < 2:
        await update.message.reply_text(
            "‚ùå –ü–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 2 –≤–∞–ª—ñ–¥–Ω–∏—Ö –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏ –Ω–∞ imgbb.com –∞–±–æ imgur.com —Ç–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ø—Ä—è–º—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è."
        )
        return

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
    user_data['image_urls'] = valid_urls
    
    await finalize_application(update, context, user_id)

def get_image_info(url: str) -> str:
    """–û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return f"üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è: {url}"

async def finalize_application(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int) -> None:
    """–ó–∞–≤–µ—Ä—à—É—î–º–æ –æ–±—Ä–æ–±–∫—É –∑–∞—è–≤–∫–∏"""
    user_data = USER_APPLICATIONS[user_id]
    user = user_data['user']

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞—è–≤–∫—É –¥–ª—è –æ–±—Ä–æ–±–∫–∏
    PENDING_REQUESTS[user_id] = {
        'user': user,
        'application': user_data['text'],
        'image_urls': user_data['image_urls']
    }

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await update.message.reply_text(
        "‚úÖ –í–∞—à—É –∑–∞—è–≤–∫—É –ø–æ–≤–Ω—ñ—Å—Ç—é –æ—Ç—Ä–∏–º–∞–Ω–æ!\n\n"
        f"üìù –¢–µ–∫—Å—Ç: –æ—Ç—Ä–∏–º–∞–Ω–æ\n"
        f"üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {len(user_data['image_urls'])}\n\n"
        "–û—á—ñ–∫—É–π—Ç–µ –Ω–∞ —Ä–æ–∑–≥–ª—è–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
        "–í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∫–æ–ª–∏ –∑–∞—è–≤–∫—É –±—É–¥–µ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–æ."
    )

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞—è–≤–∫—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –°—Ö–≤–∞–ª–∏—Ç–∏", callback_data=f"approve_{user_id}"),
            InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{user_id}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∑–æ–±—Ä–∞–∂–µ–Ω—å –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    images_list = "\n".join([f"{i+1}. {url}" for i, url in enumerate(user_data['image_urls'])])

    admin_message = (
        "üÜï –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø! (–õ–û–ö–ê–õ–¨–ù–ò–ô –¢–ï–°–¢)\n\n"
        f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.first_name} {user.last_name or ''}\n"
        f"üÜî ID: {user.id}\n"
        f"üì± –ù—ñ–∫–Ω–µ–π–º: @{user.username or '–Ω–µ–º–∞—î'}\n\n"
        f"üìù –ó–∞—è–≤–∫–∞:\n{user_data['text']}\n\n"
        f"üîó –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è ({len(user_data['image_urls'])}):\n{images_list}"
    )

    for admin_id in ADMIN_IDS:
        try:
            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏
            await context.bot.send_message(
                chat_id=admin_id,
                text=admin_message,
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

    # –û—á–∏—â—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    context.user_data['awaiting_application'] = False
    del USER_APPLICATIONS[user_id]

async def approve_request(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int) -> None:
    """–°—Ö–≤–∞–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏"""
    query = update.callback_query
    
    if user_id not in PENDING_REQUESTS:
        await query.edit_message_text("‚ùå –ó–∞—è–≤–∫—É –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    user_data = PENDING_REQUESTS[user_id]
    user = user_data['user']
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è (–≤ —Ç–µ—Å—Ç—ñ - —ñ–º—ñ—Ç–∞—Ü—ñ—è)
    try:
        user_display_name = f"{user.first_name} {user.last_name or ''}".strip()
        if user.username:
            user_display_name += f" (@{user.username})"
        
        invite_link = await create_invite_link(context, user_display_name)
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        invite_message = (
            "üéâ –í—ñ—Ç–∞—î–º–æ! (–õ–û–ö–ê–õ–¨–ù–ò–ô –¢–ï–°–¢)\n\n"
            "–í–∞—à—É –∑–∞—è–≤–∫—É —Å—Ö–≤–∞–ª–µ–Ω–æ! –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –¥–æ –≥—Ä—É–ø–∏ –ø–æ–ª—ñ—Ü—ñ—ó UKRAINE GTA.\n\n"
            f"üîó –í–∞—à–µ –æ—Å–æ–±–∏—Å—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:\n{invite_link}\n\n"
            "‚ö†Ô∏è –í–ê–ñ–õ–ò–í–û (–≤ —Ä–µ–∞–ª—å–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó):\n"
            "‚Ä¢ –¶–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å\n"
            "‚Ä¢ –í–æ–Ω–æ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–µ - –º–æ–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –æ–¥–Ω–∞ –ª—é–¥–∏–Ω–∞\n"
            "‚Ä¢ –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –π–æ–≥–æ —ñ–Ω—à–∏–º\n"
            "‚Ä¢ –ü—ñ—Å–ª—è –≤—Å—Ç—É–ø—É –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Å—Ç–∞–Ω–µ –Ω–µ–¥—ñ–π—Å–Ω–∏–º\n\n"
            "üîß –¢–ï–°–¢: –í —Ä–µ–∞–ª—å–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó –±—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É–Ω—ñ–∫–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è"
        )
        
        await context.bot.send_message(
            chat_id=user_id,
            text=invite_message
        )
        
        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–æ —É—Å–ø—ñ—Ö
        await query.edit_message_text(
            f"‚úÖ –ó–∞—è–≤–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.first_name} ({user.id}) —Å—Ö–≤–∞–ª–µ–Ω–æ! (–¢–ï–°–¢)\n\n"
            f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_display_name}\n"
            f"üîó –í —Ä–µ–∞–ª—å–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó —Å—Ç–≤–æ—Ä–µ–Ω–æ –± –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è\n"
            f"üìä –õ—ñ–º—ñ—Ç –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—å: 1 —Ä–∞–∑\n\n"
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."
        )
        
        logger.info(f"[–¢–ï–°–¢] –ó–∞—è–≤–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_display_name} ({user.id}) —Å—Ö–≤–∞–ª–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ö–≤–∞–ª–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.id}: {e}")
        await query.edit_message_text(
            f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç—ñ: {str(e)}"
        )
    
    # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞—è–≤–∫—É –∑—ñ —Å–ø–∏—Å–∫—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
    del PENDING_REQUESTS[user_id]

async def reject_request(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int) -> None:
    """–í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏"""
    query = update.callback_query
    
    if user_id not in PENDING_REQUESTS:
        await query.edit_message_text("‚ùå –ó–∞—è–≤–∫—É –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    user_data = PENDING_REQUESTS[user_id]
    user = user_data['user']
    
    # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=(
                "üòî –ù–∞ –∂–∞–ª—å, –≤–∞—à—É –∑–∞—è–≤–∫—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.\n\n"
                "–í–∏ –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ, "
                "–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤—à–∏ –∫–æ–º–∞–Ω–¥—É /start."
            )
        )
        
        await query.edit_message_text(
            f"‚ùå –ó–∞—è–≤–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.first_name} ({user.id}) –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.\n"
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–æ."
        )
    except Exception as e:
        await query.edit_message_text(
            f"‚ö†Ô∏è –ó–∞—è–≤–∫—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ, –∞–ª–µ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É: {e}"
        )
    
    # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞—è–≤–∫—É –∑—ñ —Å–ø–∏—Å–∫—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
    del PENDING_REQUESTS[user_id]

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    
    pending_count = len(PENDING_REQUESTS)
    await update.message.reply_text(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–õ–û–ö–ê–õ–¨–ù–ò–ô –¢–ï–°–¢):\n\n"
        f"–ó–∞—è–≤–æ–∫ –≤ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ: {pending_count}"
    )

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("üîß –ó–ê–ü–£–°–ö –õ–û–ö–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–£ –ë–û–¢–ê")
    print(f"ü§ñ –¢–æ–∫–µ–Ω: {BOT_TOKEN[:10]}...")
    print(f"üëÆ –ê–¥–º—ñ–Ω–∏: {ADMIN_IDS}")
    print("=" * 50)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–æ–∫
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin_command))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_application_text))
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    logger.info("üîß –õ–æ–∫–∞–ª—å–Ω–∏–π —Ç–µ—Å—Ç –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–æ!")
    print("üîß –õ–æ–∫–∞–ª—å–Ω–∏–π —Ç–µ—Å—Ç –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–æ! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏.")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()