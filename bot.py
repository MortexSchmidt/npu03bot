import os
import logging
import re
import time
import traceback
from collections import deque
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler,
    ApplicationHandlerStop,
)
from db import init_db, upsert_profile, update_profile_fields, get_profile
from db import replace_profile_images
from db import (
    insert_warning,
    insert_neaktyv_request,
    decide_neaktyv_request,
    insert_access_application,
    decide_access_application,
)
from db import log_action, log_profile_update
from db import (
    log_action,
    log_profile_update,
    query_action_logs,
    export_table_csv,
    logs_stats,
    log_error,
)
try:
    from db import get_profile_by_username, search_profiles
except ImportError:
    get_profile_by_username = None  # type: ignore
    search_profiles = None  # type: ignore

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–º—ñ–Ω–Ω—É –æ—Ç–æ—á–µ–Ω–Ω—è BOT_TOKEN. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥—É.")

ADMIN_IDS_STR = os.getenv("ADMIN_IDS", "1648720935")
ADMIN_IDS = [int(admin_id.strip()) for admin_id in ADMIN_IDS_STR.split(',')]

GROUP_CHAT_ID = os.getenv("GROUP_CHAT_ID")  # ID –≥—Ä—É–ø–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø—Ä–æ—à–µ–Ω—å
GROUP_INVITE_LINK = "https://t.me/+RItcaiRa-KU5ZThi"  # –û—Å–Ω–æ–≤–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è (—Ä–µ–∑–µ—Ä–≤–Ω–µ)

# –î–æ–¥–∞—Ç–∫–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ–º–∏ (forum topics)
def _int_or_none(val: str | None):
    try:
        return int(val) if val is not None and val != "" else None
    except Exception:
        return None

# –û—Å–Ω–æ–≤–Ω–∏–π —á–∞—Ç –¥–ª—è –∑–≤—ñ—Ç—ñ–≤/—Ç–µ–º: –±–µ—Ä–µ–º–æ –∑ REPORTS_CHAT_ID, —ñ–Ω–∞–∫—à–µ GROUP_CHAT_ID, —ñ–Ω–∞–∫—à–µ –∑ –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ —Ç–µ–º–∏
REPORTS_CHAT_ID = _int_or_none(os.getenv("REPORTS_CHAT_ID")) or _int_or_none(os.getenv("GROUP_CHAT_ID")) or -1003191532549

# ID —Ç–µ–º –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –∑ –≤–∞—à–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å
WARNINGS_TOPIC_ID = _int_or_none(os.getenv("WARNINGS_TOPIC_ID")) or 146
AFK_TOPIC_ID = _int_or_none(os.getenv("AFK_TOPIC_ID")) or 152

# –°—Ç–∞–Ω–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
PENDING_REQUESTS = {}
USER_APPLICATIONS = {}  # –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑–∞—è–≤–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
 
# –¢–∏–º—á–∞—Å–æ–≤–∏–π —Ä–µ—Ñ—ñ–ª –ø—Ä–æ—Ñ—ñ–ª—é (—Å—Ç–∞–Ω–∏ –¥—ñ–∞–ª–æ–≥—É)
REFILL_NAME, REFILL_NPU, REFILL_RANK, REFILL_IMAGES = range(4)


# –ü—ñ–¥—Ä–æ–∑–¥—ñ–ª–∏ –ù–ü–£ (UKRAINE GTA) –∑ –æ–ø–∏—Å–∞–º–∏
NPU_DEPARTMENTS = {
    # 1. –ù–ê–í–° / –•–ù–£–í–°
    "navs": {
        "title": "–ù–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–∞ –∞–∫–∞–¥–µ–º—ñ—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö —Å–ø—Ä–∞–≤ (–ù–ê–í–° / –•–ù–£–í–°)",
        "tag": "[–•–ù–£–í–°]",
        "location": "–ø–µ—Ä–µ–±—É–≤–∞—î –ø—Ä–∏ –ì–£–ù–ü –º. –•–∞—Ä–∫–æ–≤–∞",
        "eligibility": "–≤—Å—Ç—É–ø –¥–æ –ù–ü–£ ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è",
        "desc": "–ü—Ä–æ–≤—ñ–¥–Ω–∏–π –Ω–∞–≤—á–∞–ª—å–Ω–∏–π –∑–∞–∫–ª–∞–¥ –ú–í–° –¥–ª—è –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏, –ø–µ—Ä–µ–ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ç–∞ –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è –∫–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—ó –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ –ø–æ–ª—ñ—Ü—ñ—ó; –Ω–∞—É–∫–æ–≤—ñ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è, –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∞ —Å–ø—ñ–≤–ø—Ä–∞—Ü—è.",
    },
    # 2. –ö–û–†–î
    "kord": {
        "title": "–ö–æ—Ä–ø—É—Å –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ-–†–∞–ø—Ç–æ–≤–∏—Ö –î—ñ–π (–ö–û–†–î)",
        "tag": "[–ö–û–†–î]",
        "location": "–ø–µ—Ä–µ–±—É–≤–∞—î –≤ –£–ù–ü–£ –º. –î–Ω—ñ–ø—Ä–∞",
        "eligibility": "–∑ 4-–≥–æ –ø–æ—Ä—è–¥–∫–æ–≤–æ–≥–æ –∑–≤–∞–Ω–Ω—è",
        "desc": "–ï–ª—ñ—Ç–Ω–∏–π —Å–ø–µ—Ü–ø—ñ–¥—Ä–æ–∑–¥—ñ–ª: —à—Ç—É—Ä–º–æ–≤—ñ/–∞–Ω—Ç–∏—Ç–µ—Ä–æ—Ä–∏—Å—Ç–∏—á–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó, –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è –∑–∞—Ä—É—á–Ω–∏–∫—ñ–≤, –Ω–µ–π—Ç—Ä–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–∑–±—Ä–æ—î–Ω–∏—Ö –∑–ª–æ—á–∏–Ω—Ü—ñ–≤, –≤–∑–∞—î–º–æ–¥—ñ—è –∑ —ñ–Ω—à–∏–º–∏ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª–∞–º–∏.",
    },
    # 3. –î–ü–ü
    "dpp": {
        "title": "–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –ü–∞—Ç—Ä—É–ª—å–Ω–æ—ó –ü–æ–ª—ñ—Ü—ñ—ó (–î–ü–ü)",
        "tag": "[–î–ü–ü]",
        "location": "–ø–µ—Ä–µ–±—É–≤–∞—î –≤ –£–ù–ü–£ –º. –•–∞—Ä–∫–æ–≤–∞",
        "eligibility": "–∑ 3-–≥–æ –ø–æ—Ä—è–¥–∫–æ–≤–æ–≥–æ –∑–≤–∞–Ω–Ω—è",
        "desc": "–ü–∞—Ç—Ä—É–ª—é–≤–∞–Ω–Ω—è, —Ä–µ–∞–≥—É–≤–∞–Ω–Ω—è –Ω–∞ –≤–∏–∫–ª–∏–∫–∏, –ø—Ä–æ—Ñ—ñ–ª–∞–∫—Ç–∏–∫–∞ –ø—Ä–∞–≤–æ–ø–æ—Ä—É—à–µ–Ω—å, –ü–î–†, –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–ø—Ä–∞–≤–æ–ø–æ—Ä—É—à–µ–Ω—å, –ø–µ—Ä—à–∞ –¥–æ–ø–æ–º–æ–≥–∞ –ø—Ä–∏ –î–¢–ü.",
    },
    # 4. –ì–°–£
    "gsu": {
        "title": "–ì–æ–ª–æ–≤–Ω–µ –°–ª—ñ–¥—á–µ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è (–ì–°–£)",
        "tag": "[–ì–°–£]",
        "location": "–ø–µ—Ä–µ–±—É–≤–∞—î –≤ –ì–£–ù–ü–£ –º. –ö–∏—î–≤–∞",
        "eligibility": "–æ—Ñ—ñ—Ü–µ—Ä—Å—å–∫–∏–π —Å–∫–ª–∞–¥, —Å–ø–µ—Ü. —É –∫—Ä–∏–º—ñ–Ω–∞–ª—å–Ω–æ–º—É –ø—Ä–æ—Ü–µ—Å—ñ",
        "desc": "–î–æ—Å—É–¥–æ–≤–µ —Ä–æ–∑—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è –æ—Å–æ–±–ª–∏–≤–æ —Ç—è–∂–∫–∏—Ö –∑–ª–æ—á–∏–Ω—ñ–≤, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ—è —Ä–µ–≥—ñ–æ–Ω–∞–ª—å–Ω–∏—Ö —Å–ª—ñ–¥—á–∏—Ö, –≤–∑–∞—î–º–æ–¥—ñ—è –∑ –ø—Ä–æ–∫—É—Ä–∞—Ç—É—Ä–æ—é —Ç–∞ —Å–ø–µ—Ü—Å–ª—É–∂–±–∞–º–∏.",
    },
    # 5. –î–í–ë
    "dvb": {
        "title": "–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –í–Ω—É—Ç—Ä—ñ—à–Ω—å–æ—ó –ë–µ–∑–ø–µ–∫–∏ (–î–í–ë)",
        "tag": "[–î–í–ë]",
        "location": "–ø–µ—Ä–µ–±—É–≤–∞—î –≤ –ì–£–ù–ü–£ –º. –ö–∏—î–≤–∞",
        "eligibility": "–≤—ñ–¥–±—ñ—Ä —É —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª",
        "desc": "–ü—Ä–æ—Ç–∏–¥—ñ—è –∫–æ—Ä—É–ø—Ü—ñ—ó —Ç–∞ –∑–ª–æ—á–∏–Ω–∞–º —É –ø–æ–ª—ñ—Ü—ñ—ó, —Å–ª—É–∂–±–æ–≤—ñ —Ä–æ–∑—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è, –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ñ –∑–∞—Ö–æ–¥–∏, –≤–∑–∞—î–º–æ–¥—ñ—è –∑ –∞–Ω—Ç–∏–∫–æ—Ä—É–ø—Ü—ñ–π–Ω–∏–º–∏ –æ—Ä–≥–∞–Ω–∞–º–∏.",
    },
    # 6. –ù–¶–£–ü
    "ncup": {
        "title": "–ù–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –¶–µ–Ω—Ç—Ä –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ü–æ–ª—ñ—Ü—ñ—î—é (–ù–¶–£–ü)",
        "tag": "[–ù–¶–£–ü]",
        "location": "–ø–µ—Ä–µ–±—É–≤–∞—î –≤ –ì–£–ù–ü–£ –º. –ö–∏—î–≤–∞",
        "eligibility": "—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏–π –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ-–∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏–π –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª",
        "desc": "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ—è –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤ —É —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ, –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∏–∑–∞—Ü—ñ—è 102, –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞, –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏—Ö —Å–∏—Å—Ç–µ–º —ñ –∫—ñ–±–µ—Ä–±–µ–∑–ø–µ–∫–∞.",
    },
}

# –°–ø–∏—Å–æ–∫ –∑–≤–∞–Ω—å –ù–ü–£ –¥–ª—è UKRAINE GTA (–ø–æ –ø–æ—Ä—è–¥–∫—É)
NPU_RANKS = [
    "–†—è–¥–æ–≤–∏–π",
    "–ö–∞–ø—Ä–∞–ª",
    "–°–µ—Ä–∂–∞–Ω—Ç",
    "–°—Ç–∞—Ä—à–∏–π —Å–µ—Ä–∂–∞–Ω—Ç",
    "–ú–æ–ª–æ–¥—à–∏–π –ª–µ–π—Ç–µ–Ω–∞–Ω—Ç",
    "–õ–µ–π—Ç–µ–Ω–∞–Ω—Ç",
    "–°—Ç–∞—Ä—à–∏–π –ª–µ–π—Ç–µ–Ω–∞–Ω—Ç",
    "–ö–∞–ø—ñ—Ç–∞–Ω",
    "–ú–∞–π–æ—Ä",
    "–ü—ñ–¥–ø–æ–ª–∫–æ–≤–Ω–∏–∫",
    "–ü–æ–ª–∫–æ–≤–Ω–∏–∫",
    "–ì–µ–Ω–µ—Ä–∞–ª",
]

def parse_ranked_name(text: str) -> tuple[str | None, str]:
    """–í–∏–¥—ñ–ª—è—î –∑–≤–∞–Ω–Ω—è –Ω–∞ –ø–æ—á–∞—Ç–∫—É —Ä—è–¥–∫–∞, —è–∫—â–æ –≤–æ–Ω–æ —î, —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î (rank, name).
    –Ø–∫—â–æ –∑–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î (None, original_text).
    –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –Ω–µ—á—É—Ç–ª–∏–≤–µ –¥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É.
    """
    s = text.strip()
    lower = s.lower()
    for rank in NPU_RANKS:
        r = rank.lower()
        if lower.startswith(r + " "):
            name = s[len(rank):].strip()
            return rank, name
    return None, s

def is_ukrainian_name(text: str) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –º—ñ—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ"""
    # –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏
    ukrainian_pattern = re.compile(r'^[–ê-–Ø–Ü–á–Ñ–∞-—è—ñ—ó—î\'\-\s]+$', re.UNICODE)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–∑–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç
    if not ukrainian_pattern.match(text.strip()):
        return False
    
    # –†–æ–∑–¥—ñ–ª—è—î–º–æ –Ω–∞ —Å–ª–æ–≤–∞ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —î –º—ñ–Ω—ñ–º—É–º 2 —Å–ª–æ–≤–∞ (—ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ)
    words = text.strip().split()
    if len(words) < 2:
        return False
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –∫–æ–∂–Ω–µ —Å–ª–æ–≤–æ –º–∞—î –º—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏
    for word in words:
        if len(word) < 2:
            return False
    
    return True

def display_ranked_name(rank: str | None, name: str) -> str:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–µ —ñ–º'—è –∑ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–º –∑–≤–∞–Ω–Ω—è–º."""
    return f"{rank} {name}".strip() if rank else name

# ===== –¢–∏–º—á–∞—Å–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é =====
async def refill_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°—Ç–∞—Ä—Ç —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ –º–∞–π—Å—Ç—Ä–∞ –ø–µ—Ä–µ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –¥–ª—è –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö."""
    user = update.effective_user
    profile = get_profile(user.id)
    if not profile:
        await update.message.reply_text(
            "‚ÑπÔ∏è –ü—Ä–æ—Ñ—ñ–ª—å —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ. –°–ø–æ—á–∞—Ç–∫—É —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å /start –¥–ª—è –ø–µ—Ä–≤–∏–Ω–Ω–æ—ó –∑–∞—è–≤–∫–∏.")
        return ConversationHandler.END

    context.user_data["refill_form"] = {}
    existing = profile.get("in_game_name") or ""
    hint = f" –ü–æ—Ç–æ—á–Ω–µ: {existing}" if existing else ""
    await update.message.reply_text(
        "üõ†Ô∏è <b>–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é (—Ç–∏–º—á–∞—Å–æ–≤–æ)</b>\n\n"
        "üî∏ –ö—Ä–æ–∫ 1 –∑ 4: –Ü–º'—è —É –≥—Ä—ñ\n\n"
        "–í–≤–µ–¥—ñ—Ç—å <i>—ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é</i> (–ø–æ–≤–Ω—ñ—Å—Ç—é)." + hint,
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="HTML",
    )
    return REFILL_NAME

async def refill_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    name_input = update.message.text.strip()
    if not is_ukrainian_name(name_input):
        await update.message.reply_text(
            "‚ùå –Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –º–∞—é—Ç—å –±—É—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é!\n\n"
            "–ü—Ä–∏–∫–ª–∞–¥–∏: \n"
            "‚úÖ –û–ª–µ–∫—Å–∞–Ω–¥—Ä –Ü–≤–∞–Ω–µ–Ω–∫–æ\n"
            "‚úÖ –ú–∞—Ä—ñ—è –ü–µ—Ç—Ä–µ–Ω–∫–æ-–ö–æ–≤–∞–ª–µ–Ω–∫–æ\n\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return REFILL_NAME
    context.user_data.setdefault("refill_form", {})["in_game_name"] = name_input

    # –ö—Ä–æ–∫ 2: –≤–∏–±—ñ—Ä –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É
    keyboard = []
    for code, meta in NPU_DEPARTMENTS.items():
        keyboard.append([InlineKeyboardButton(meta["title"], callback_data=f"refill_npu_{code}")])
    await update.message.reply_text(
        "üî∏ –ö—Ä–æ–∫ 2 –∑ 4: –ü—ñ–¥—Ä–æ–∑–¥—ñ–ª –ù–ü–£\n\n–û–±–µ—Ä—ñ—Ç—å –≤–∞—à –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª:",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )
    return REFILL_NPU

async def refill_select_npu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    parts = query.data.split("_", 2)
    # data —Ñ–æ—Ä–º–∞—Ç: refill_npu_<code>
    if len(parts) < 3:
        await query.edit_message_text("‚ùå –ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ –≤–∏–±–æ—Ä—É –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É.")
        return ConversationHandler.END
    npu_code = parts[2]
    if npu_code not in NPU_DEPARTMENTS:
        await query.edit_message_text("‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª.")
        return ConversationHandler.END

    meta = NPU_DEPARTMENTS[npu_code]
    form = context.user_data.setdefault("refill_form", {})
    form["npu_department"] = meta["title"]
    form["npu_code"] = npu_code

    # –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–∞—Ä—Ç–∫—É —Ç–∞ –≤–∏–±—ñ—Ä –∑–≤–∞–Ω–Ω—è
    rank_buttons = []
    row = []
    for idx, rank in enumerate(NPU_RANKS):
        row.append(InlineKeyboardButton(rank, callback_data=f"refill_rank_{idx}"))
        if len(row) == 2:
            rank_buttons.append(row)
            row = []
    if row:
        rank_buttons.append(row)

    desc = (
        f"‚úÖ –û–±—Ä–∞–Ω–æ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª: <b>{meta['title']}</b> {meta['tag']}\n"
        f"–ú—ñ—Å—Ü–µ: {meta['location']}\n"
        f"–î–æ–ø—É—Å–∫: {meta['eligibility']}\n\n"
        f"{meta['desc']}\n\n"
        "üî∏ –ö—Ä–æ–∫ 3 –∑ 4: –û–±–µ—Ä—ñ—Ç—å –≤–∞—à–µ –∑–≤–∞–Ω–Ω—è"
    )
    await query.edit_message_text(desc, reply_markup=InlineKeyboardMarkup(rank_buttons), parse_mode="HTML")
    return REFILL_RANK

async def refill_select_rank(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    try:
        idx = int(query.data.split("_")[-1])
    except Exception:
        await query.edit_message_text("‚ùå –ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ –≤–∏–±–æ—Ä—É –∑–≤–∞–Ω–Ω—è.")
        return ConversationHandler.END
    if not (0 <= idx < len(NPU_RANKS)):
        await query.edit_message_text("‚ùå –ù–µ–≤—ñ–¥–æ–º–µ –∑–≤–∞–Ω–Ω—è.")
        return ConversationHandler.END

    rank = NPU_RANKS[idx]
    context.user_data.setdefault("refill_form", {})["rank"] = rank
    await query.edit_message_text(
        f"‚úÖ –ó–≤–∞–Ω–Ω—è –æ–±—Ä–∞–Ω–æ: {rank}\n\n"
        "üî∏ –ö—Ä–æ–∫ 4 –∑ 4: –ù–∞–¥—ñ—à–ª—ñ—Ç—å 2 –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏ (–ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è —Ç–∞ —Ç—Ä—É–¥–æ–≤—É –∫–Ω–∏–∂–∫—É).\n\n"
        "–ö–æ–∂–µ–Ω URL –∑ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞. –ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è imgbb/imgur/postimg —Ç–∞ —ñ–Ω.")
    return REFILL_IMAGES

async def refill_images(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    urls = [u.strip() for u in text.splitlines() if u.strip()]
    if len(urls) < 2:
        await update.message.reply_text(
            "‚ùå –ü–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 2 –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —â–µ —Ä–∞–∑.")
        return REFILL_IMAGES
    
    form = context.user_data.get("refill_form", {})
    user = update.effective_user

    # –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å —Ç–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ –ë–î
    try:
        update_profile_fields(
            user.id,
            in_game_name=form.get("in_game_name"),
            npu_department=form.get("npu_department"),
            rank=form.get("rank"),
        )
        replace_profile_images(user.id, urls)
        # –õ–æ–≥–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é —Ç–∞ –¥—ñ—ó
        try:
            log_profile_update(
                user_id=user.id,
                fields={
                    "in_game_name": form.get("in_game_name"),
                    "npu_department": form.get("npu_department"),
                    "rank": form.get("rank"),
                },
                images_count=len(urls),
                source="refill",
            )
            log_action(
                actor_id=user.id,
                actor_username=update.effective_user.username if update.effective_user else None,
                action="profile_refill",
                target_user_id=user.id,
                target_username=update.effective_user.username if update.effective_user else None,
                details=f"images={len(urls)}",
            )
        except Exception:
            pass
    except Exception as e:
        logger.error(f"refill save failed: {e}")
        await update.message.reply_text("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.")
        return ConversationHandler.END

    # –ü—ñ–¥—Å—É–º–æ–∫
    summary = (
        "‚úÖ <b>–ü—Ä–æ—Ñ—ñ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ</b>\n\n"
        "<blockquote>"
        f"–Ü–º'—è —É –≥—Ä—ñ: {form.get('in_game_name')}\n"
        f"–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª: {form.get('npu_department')}\n"
        f"–ó–≤–∞–Ω–Ω—è: {form.get('rank')}\n"
        f"–§–æ—Ç–æ: {len(urls)} –ø–æ—Å–∏–ª–∞–Ω–Ω—è"
        "</blockquote>\n\n"
        "–î—è–∫—É—î–º–æ! –¶—è –∫–æ–º–∞–Ω–¥–∞ —î <i>—Ç–∏–º—á–∞—Å–æ–≤–æ—é</i> —ñ –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–∞ –ø—ñ—Å–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó."
    )
    await update.message.reply_text(summary, parse_mode="HTML", disable_web_page_preview=True)

    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞–Ω—É
    context.user_data.pop("refill_form", None)
    return ConversationHandler.END

async def create_invite_link(context: ContextTypes.DEFAULT_TYPE, user_name: str) -> str:
    """–°—Ç–≤–æ—Ä—é—î –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è-–∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        # –Ø–∫—â–æ —î ID –≥—Ä—É–ø–∏, —Å—Ç–≤–æ—Ä—é—î–º–æ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        if GROUP_CHAT_ID:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è, —â–æ –¥—ñ—î 24 –≥–æ–¥–∏–Ω–∏ —Ç–∞ –º–æ–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ 1 –ª—é–¥–∏–Ω–∞
            invite_link = await context.bot.create_chat_invite_link(
                chat_id=GROUP_CHAT_ID,
                name=f"–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—è –¥–ª—è {user_name}",
                expire_date=None,  # –ë–µ–∑ –æ–±–º–µ–∂–µ–Ω–Ω—è –ø–æ —á–∞—Å—É, –∞–ª–µ –∑ –ª—ñ–º—ñ—Ç–æ–º –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—å
                member_limit=1,  # –¢—ñ–ª—å–∫–∏ –æ–¥–Ω–∞ –ª—é–¥–∏–Ω–∞ –º–æ–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏
                creates_join_request=False  # –ü—Ä—è–º–∏–π –≤—Å—Ç—É–ø –±–µ–∑ –∑–∞–ø–∏—Ç—É
            )
            logger.info(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è {user_name}: {invite_link.invite_link}")
            return invite_link.invite_link
        else:
            # –Ø–∫—â–æ –Ω–µ–º–∞—î ID –≥—Ä—É–ø–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å–Ω–æ–≤–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
            logger.warning("GROUP_CHAT_ID –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å–Ω–æ–≤–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è")
            return GROUP_INVITE_LINK
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è-–∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è: {e}")
        # –í —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å–Ω–æ–≤–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        return GROUP_INVITE_LINK

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start: —Ä—ñ–∑–Ω–∞ –ø–æ–≤–µ–¥—ñ–Ω–∫–∞ –¥–ª—è —á–ª–µ–Ω—ñ–≤ –≥—Ä—É–ø–∏ —Ç–∞ —Ç–∏—Ö, —Ö—Ç–æ —â–µ –Ω–µ –≤ –≥—Ä—É–ø—ñ"""
    user = update.effective_user

    # –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ë–î (TG –¥–∞–Ω—ñ)
    tg_fullname = f"{user.first_name or ''} {user.last_name or ''}".strip()
    upsert_profile(
        telegram_id=user.id,
        username=user.username or None,
        full_name_tg=tg_fullname or None,
        role='admin' if user.id in ADMIN_IDS else 'user',
    )
    # –õ–æ–≥ –ø–æ–¥—ñ—ó —Å—Ç–∞—Ä—Ç—É —Ç–∞ –∑–Ω—ñ–º–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
    try:
        log_profile_update(
            user_id=user.id,
            fields={
                "username": user.username or None,
                "full_name_tg": tg_fullname or None,
                "role": ('admin' if user.id in ADMIN_IDS else 'user'),
            },
            images_count=None,
            source="start",
        )
        log_action(
            actor_id=user.id,
            actor_username=user.username,
            action="start",
            target_user_id=user.id,
            target_username=user.username,
            details=None,
        )
    except Exception:
        pass

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–ª–µ–Ω—Å—Ç–≤–∞ —É –≥—Ä—É–ø—ñ
    user_is_member = False
    if REPORTS_CHAT_ID:
        try:
            member = await context.bot.get_chat_member(REPORTS_CHAT_ID, user.id)
            user_is_member = member.status in {"member", "administrator", "creator"}
        except Exception as e:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–ª–µ–Ω—Å—Ç–≤–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.id}: {e}")

    if user_is_member:
        # –ü–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –≤–∑–∞—î–º–æ–¥—ñ—ó (–∫–Ω–æ–ø–∫–∏ –ø—ñ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥—É)
        is_admin = user.id in ADMIN_IDS
        keyboard_rows = [["üìù –ó–∞—è–≤–∞ –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤"]]
        if is_admin:
            keyboard_rows.append(["ÔøΩÔ∏è –ê–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∏"])  # –ü–µ—Ä–µ–º–∏–∫–∞—á —É –∞–¥–º—ñ–Ω-–º–µ–Ω—é
        reply_kb = ReplyKeyboardMarkup(keyboard_rows, resize_keyboard=True)

        text = (
            f"<b>–í—ñ—Ç–∞—é, {user.first_name}!</b> üëã\n\n"
            "<i>–Ø –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏ –∑ –≤–∞–º–∏ —É –≥—Ä—É–ø—ñ. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ:</i>"
        )
        await update.message.reply_text(text, reply_markup=reply_kb, parse_mode="HTML")
    else:
        # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —â–µ –Ω–µ –≤ –≥—Ä—É–ø—ñ ‚Äî —Å—Ç–∞—Ä–∞ –ª–æ–≥—ñ–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É
        keyboard = [
            [InlineKeyboardButton("üìù –ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ—Å—Ç—É–ø", callback_data="request_access")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        welcome_message = (
            f"<b>–í—ñ—Ç–∞—é, {user.first_name}!</b> üëã\n\n"
            "–¶–µ –±–æ—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–æ –≥—Ä—É–ø–∏ <b>–ø–æ–ª—ñ—Ü—ñ—ó UKRAINE GTA</b>.\n\n"
            "<i>–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –≥—Ä—É–ø–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ —Ç–∞ –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –∑–∞—è–≤–∫—É.</i>"
        )
        await update.message.reply_text(welcome_message, reply_markup=reply_markup, parse_mode="HTML")


async def admin_help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–î–µ—Ç–∞–ª—å–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ (–¥–æ—Å—Ç—É–ø –ª–∏—à–µ –∞–¥–º—ñ–Ω–∞–º)."""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
        return
    text = (
        "üõ°Ô∏è <b>–ê–¥–º—ñ–Ω-–¥–æ–≤—ñ–¥–∫–∞</b>\n\n"
        "<b>–ê–¥–º—ñ–Ω—Å—å–∫—ñ –∫–æ–º–∞–Ω–¥–∏</b>:\n"
        "‚Ä¢ /admin ‚Äî –∫–æ—Ä–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤\n"
        "‚Ä¢ /dogana ‚Äî –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –¥–æ–≥–∞–Ω–∏ (5 –∫—Ä–æ–∫—ñ–≤, –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É –ë–î)\n"
        "‚Ä¢ /user &lt;id|@username&gt; ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n"
        "‚Ä¢ /find &lt;—Ç–µ–∫—Å—Ç&gt; ‚Äî –ø–æ—à—É–∫ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤; –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ–¥–∞—é—Ç—å—Å—è –∫–Ω–æ–ø–∫–∏ –¥—ñ–π (kick/–¥–æ–≥–∞–Ω–∞)\n"
        "‚Ä¢ /broadcast_fill ‚Äî —Ä–æ–∑—Å–∏–ª–∫–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó —â–æ–¥–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é\n"
        "‚Ä¢ /logs [limit] [action=...] [actor_id=...] [actor=@...] [from=YYYY-MM-DD] [to=YYYY-MM-DD] ‚Äî –æ—Å—Ç–∞–Ω–Ω—ñ –¥—ñ—ó –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏\n"
        "‚Ä¢ /export_csv &lt;table&gt; [days=N] ‚Äî –µ–∫—Å–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü—ñ —É CSV (profiles, action_logs, warnings, ... )\n"
        "‚Ä¢ /log_stats [days=7] ‚Äî —Å–≤–æ–¥–∫–∞ (–¥—ñ—ó –∑–∞ —Ç–∏–ø–∞–º–∏, –∞–Ω—Ç–∏—Å–ø–∞–º –ø—ñ–¥—Å—É–º–∫–∏)\n\n"
        "<b>–ú–æ–¥–µ—Ä–∞—Ü—ñ—è –Ω–µ–∞–∫—Ç–∏–≤—É</b>: —É –ø—Ä–∏–≤–∞—Ç –ø—Ä–∏—Ö–æ–¥—è—Ç—å –∫–∞—Ä—Ç–∫–∏ –∑ –∫–Ω–æ–ø–∫–∞–º–∏; –ø—ñ—Å–ª—è —Ä—ñ—à–µ–Ω–Ω—è ‚Äî –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è —É —Ç–µ–º—ñ –∑ –∞—Ç—Ä–∏–±—É—Ü—ñ—î—é.\n"
    )
    await update.message.reply_text(text, parse_mode="HTML", disable_web_page_preview=True)

############################
# –î–û–ì–ê–ù (–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º)
############################

# –°—Ç–∞–Ω–∏ –¥–ª—è –¥—ñ–∞–ª–æ–≥—É '–¥–æ–≥–∞–Ω–∞'
DOGANA_OFFENSE, DOGANA_DATE, DOGANA_TO, DOGANA_BY, DOGANA_PUNISH = range(5)

async def dogana_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    if user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –¥—ñ—ó.")
        return ConversationHandler.END
    context.user_data["dogana_form"] = {}
    await update.message.reply_text(
        "üìù <b>–û–§–û–†–ú–õ–ï–ù–ù–Ø –î–û–ì–ê–ù–ò</b>\n\n"
        "üî∏ <b>–ö—Ä–æ–∫ 1 –∑ 5:</b> –û–ø–∏—Å –ø–æ—Ä—É—à–µ–Ω–Ω—è\n\n"
        "<i>–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –¥–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –ø–æ—Ä—É—à–µ–Ω–Ω—è:</i>",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="HTML"
    )
    return DOGANA_OFFENSE

async def dogana_offense(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["dogana_form"]["offense"] = update.message.text.strip()
    await update.message.reply_text(
        "üìù <b>–û–§–û–†–ú–õ–ï–ù–ù–Ø –î–û–ì–ê–ù–ò</b>\n\n"
        "üî∏ <b>–ö—Ä–æ–∫ 2 –∑ 5:</b> –î–∞—Ç–∞ –ø–æ—Ä—É—à–µ–Ω–Ω—è\n\n"
        "<i>–í–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ</i> <code>–î–î.–ú–ú.–†–†–†–†</code> <i>–∞–±–æ</i> <code>–î–î.–ú–ú</code>:\n"
        "–ü—Ä–∏–∫–ª–∞–¥: <code>01.10.2025</code> –∞–±–æ <code>01.10</code>",
        parse_mode="HTML"
    )
    return DOGANA_DATE

async def dogana_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    date_text = update.message.text.strip()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É –¥–∞—Ç–∏ (—Ü–∏—Ñ—Ä–∏ —Ç–∞ —Ç–æ—á–∫–∏)
    if not re.match(r'^\d{1,2}\.\d{1,2}(\.\d{4})?$', date_text):
        await update.message.reply_text(
            "‚ùå <b>–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏!</b>\n\n"
            "<i>–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:</i>\n"
            "‚Ä¢ <code>–î–î.–ú–ú.–†–†–†–†</code> (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: <code>01.10.2025</code>)\n"
            "‚Ä¢ <code>–î–î.–ú–ú</code> (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: <code>01.10</code>)\n\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:",
            parse_mode="HTML"
        )
        return DOGANA_DATE
    
    context.user_data["dogana_form"]["date"] = date_text
    # –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –≤–∏–±–æ—Ä—É —á–µ—Ä–µ–∑ /find (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)
    prefill_to = context.user_data.get("dogana_prefill_to")
    hint = (f"\n–ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: <code>{prefill_to}</code>\n"
            "–í–≤–µ–¥—ñ—Ç—å '–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º' –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å —ñ–Ω—à–µ —ñ–º'—è") if prefill_to else ""
    await update.message.reply_text(
        "üìù <b>–û–§–û–†–ú–õ–ï–ù–ù–Ø –î–û–ì–ê–ù–ò</b>\n\n"
        "üî∏ <b>–ö—Ä–æ–∫ 3 –∑ 5:</b> –ü–æ—Ä—É—à–Ω–∏–∫\n\n"
        "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –æ—Å–æ–±–∏, —è–∫—ñ–π –≤–∏–¥–∞—î—Ç—å—Å—è –¥–æ–≥–∞–Ω–∞:\n"
        "<i>(—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, –ø–æ–≤–Ω–µ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ)</i>" + hint,
        parse_mode="HTML"
    )
    return DOGANA_TO

async def dogana_to(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    raw = update.message.text.strip()
    # –î–æ–∑–≤–æ–ª—è—î–º–æ '–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º' –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—Ä–µ—Ñ—ñ–ª–∞ –∑ /find
    if raw.lower() == "–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º" and context.user_data.get("dogana_prefill_to"):
        raw = context.user_data.get("dogana_prefill_to")
    rank, name_text = parse_ranked_name(raw)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É —ñ–º–µ–Ω—ñ
    if not re.match(r'^[–ê-–Ø–Ü–á–Ñ–∞-—è—ñ—ó—î\'\-\s\.]+$', name_text):
        await update.message.reply_text(
            "‚ùå <b>–Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –º–∞—é—Ç—å –±—É—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é!</b>\n\n"
            "<i>–ü—Ä–∏–∫–ª–∞–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É:</i>\n"
            "‚úÖ –û–ª–µ–∫—Å–∞–Ω–¥—Ä –Ü–≤–∞–Ω–µ–Ω–∫–æ\n"
            "‚úÖ –ú–∞—Ä—ñ—è –ü–µ—Ç—Ä–µ–Ω–∫–æ-–ö–æ–≤–∞–ª–µ–Ω–∫–æ\n"
            "‚úÖ –ê–Ω–Ω–∞-–ú–∞—Ä—ñ—è –°–∏–¥–æ—Ä–µ–Ω–∫–æ\n\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:",
            parse_mode="HTML"
        )
        return DOGANA_TO
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ —î –º—ñ–Ω—ñ–º—É–º 2 —Å–ª–æ–≤–∞
    words = name_text.split()
    if len(words) < 2:
        await update.message.reply_text(
            "‚ùå <b>–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ!</b>\n\n"
            "–ü—Ä–∏–∫–ª–∞–¥: <code>–û–ª–µ–∫—Å–∞–Ω–¥—Ä –Ü–≤–∞–Ω–µ–Ω–∫–æ</code>\n\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:",
            parse_mode="HTML"
        )
        return DOGANA_TO
    
    context.user_data["dogana_form"]["to_whom"] = name_text
    context.user_data["dogana_form"]["rank_to"] = rank
    # –ü—ñ—Å–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—Ä–µ—Ñ—ñ–ª–∞ ‚Äî –ø—Ä–∏–±–µ—Ä–µ–º–æ –π–æ–≥–æ
    context.user_data.pop("dogana_prefill_to", None)
    # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –∞–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ö—Ç–æ –≤–∏–¥–∞–≤
    admin_name = f"{update.effective_user.first_name} {update.effective_user.last_name or ''}".strip()
    await update.message.reply_text(
        "üìù <b>–û–§–û–†–ú–õ–ï–ù–ù–Ø –î–û–ì–ê–ù–ò</b>\n\n"
        "üî∏ <b>–ö—Ä–æ–∫ 4 –∑ 5:</b> –•—Ç–æ –≤–∏–¥–∞–≤\n\n"
        f"–ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: <code>{admin_name}</code>\n\n"
        "<i>–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –æ—Å–æ–±–∏, —è–∫–∞ –≤–∏–¥–∞—î –¥–æ–≥–∞–Ω—É, –∞–±–æ –∑–∞–ª–∏—à—Ç–µ —è–∫ —î:</i>",
        parse_mode="HTML"
    )
    context.user_data["dogana_form"]["default_by"] = admin_name
    return DOGANA_BY

async def dogana_by(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    by_whom = text if text and text.lower() != "–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º" else context.user_data["dogana_form"].get("default_by")
    context.user_data["dogana_form"]["by_whom"] = by_whom

    # –í–∏–±—ñ—Ä –ø–æ–∫–∞—Ä–∞–Ω–Ω—è —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫–∏
    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–î–æ–≥–∞–Ω–∞", callback_data="dogana_punish_dogana"),
            InlineKeyboardButton("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", callback_data="dogana_punish_poperedzhennya"),
        ]
    ])
    await update.message.reply_text(
        "üìù <b>–û–§–û–†–ú–õ–ï–ù–ù–Ø –î–û–ì–ê–ù–ò</b>\n\n"
        "üî∏ <b>–ö—Ä–æ–∫ 5 –∑ 5:</b> –í–∏–¥ –ø–æ–∫–∞—Ä–∞–Ω–Ω—è\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –≤–∏–¥ –ø–æ–∫–∞—Ä–∞–Ω–Ω—è:",
        reply_markup=kb,
        parse_mode="HTML"
    )
    return DOGANA_PUNISH

async def dogana_punish_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    kind = "–î–æ–≥–∞–Ω–∞" if query.data.endswith("dogana") else "–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è"
    form = context.user_data.get("dogana_form", {})

    text = (
        "‚ö†Ô∏è <b>–î–û–ì–ê–ù–ê</b>\n\n"
        "<blockquote>"
        f"1. –ü–æ—Ä—É—à–µ–Ω–Ω—è: {form.get('offense')}\n"
        f"2. –î–∞—Ç–∞ –ø–æ—Ä—É—à–µ–Ω–Ω—è: {form.get('date')}\n"
        f"3. –ö–æ–º—É –≤–∏–¥–∞–Ω–æ: {display_ranked_name(form.get('rank_to'), form.get('to_whom'))}\n"
        f"4. –•—Ç–æ –≤–∏–¥–∞–≤: {form.get('by_whom')}\n"
        f"5. –ü–æ–∫–∞—Ä–∞–Ω–Ω—è: {kind}\n\n"
        f"–í—ñ–¥: @{query.from_user.username if query.from_user.username else query.from_user.first_name}"
        "</blockquote>"
    )
    try:
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤ –ë–î
        try:
            insert_warning(
                offense=form.get('offense') or '',
                date_text=form.get('date') or '',
                to_whom=form.get('to_whom') or '',
                rank_to=form.get('rank_to'),
                by_whom=form.get('by_whom') or '',
                kind=kind,
                issued_by_user_id=query.from_user.id if query and query.from_user else None,
                issued_by_username=(query.from_user.username if query and query.from_user else None),
            )
            try:
                log_action(
                    actor_id=query.from_user.id if query and query.from_user else None,
                    actor_username=query.from_user.username if query and query.from_user else None,
                    action="warning_issued",
                    target_user_id=None,
                    target_username=None,
                    details=f"kind={kind}; to={form.get('to_whom')}; rank={form.get('rank_to')}; date={form.get('date')}",
                )
            except Exception:
                pass
        except Exception as dbe:
            logger.error(f"DB log warning failed: {dbe}")

        await context.bot.send_message(
            chat_id=REPORTS_CHAT_ID,
            text=text,
            message_thread_id=WARNINGS_TOPIC_ID,
            parse_mode="HTML",
            disable_web_page_preview=True,
        )
        await query.edit_message_text("‚úÖ –î–æ–≥–∞–Ω—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É —Ç–µ–º—É.")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –¥–æ–≥–∞–Ω–∏: {e}")
        await query.edit_message_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —É —Ç–µ–º—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ —Ç–∞ ID —Ç–µ–º–∏.")
    finally:
        context.user_data.pop("dogana_form", None)
    return ConversationHandler.END

async def dogana_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.pop("dogana_form", None)
    await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

############################
# –ó–ê–Ø–í–ò –ù–ê –ù–ï–ê–ö–¢–ò–í (—É—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ)
############################

NEAKTYV_TO, NEAKTYV_TIME, NEAKTYV_DEPARTMENT = range(3)

# –°—Ç–∞–Ω–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –¥–æ—Å—Ç—É–ø
APP_WAITING_NAME, APP_WAITING_NPU, APP_WAITING_RANK, APP_WAITING_IMAGES = range(4)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –∑–∞—è–≤
NEAKTYV_APPROVAL_NAME = range(1)

async def neaktyv_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["neaktyv_form"] = {}
    await update.message.reply_text(
        "üìù –ü–û–î–ê–ß–ê –ó–ê–Ø–í–ò –ù–ê –ù–ï–ê–ö–¢–ò–í\n\n"
        "üî∏ –ö—Ä–æ–∫ 1 –∑ 3: –û—Ç—Ä–∏–º—É–≤–∞—á\n\n"
        "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –æ—Å–æ–±–∏, —è–∫—ñ–π –Ω–∞–¥–∞—î—Ç—å—Å—è –Ω–µ–∞–∫—Ç–∏–≤:\n"
        "(–£–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, –ø–æ–≤–Ω–µ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ)",
        reply_markup=ReplyKeyboardRemove()
    )
    return NEAKTYV_TO

async def neaktyv_to(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    raw = update.message.text.strip()
    rank, name = parse_ranked_name(raw)
    
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ —ñ–º–µ–Ω—ñ
    if not re.match(r'^[–ê-–Ø“ê–Ü–á–Ñ–Å][–∞-—è“ë—ñ—ó—î—ë\']*\s+[–ê-–Ø“ê–Ü–á–Ñ–Å][–∞-—è“ë—ñ—ó—î—ë\']*$', name):
        await update.message.reply_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è!\n\n"
            "–Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –ø–æ–≤–∏–Ω–Ω—ñ:\n"
            "‚Ä¢ –ë—É—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é\n"
            "‚Ä¢ –ü–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ –≤–µ–ª–∏–∫–∏—Ö –ª—ñ—Ç–µ—Ä\n"
            "‚Ä¢ –ú—ñ—Å—Ç–∏—Ç–∏ –ª–∏—à–µ –ª—ñ—Ç–µ—Ä–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤—ñ—Ç—É\n\n"
            "–ü—Ä–∏–∫–ª–∞–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è (–∑—ñ –∑–≤–∞–Ω–Ω—è–º –∞–±–æ –±–µ–∑ –Ω—å–æ–≥–æ):\n"
            "‚úÖ –†—è–¥–æ–≤–∏–π –Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ\n"
            "‚úÖ –ö–∞–ø—ñ—Ç–∞–Ω –ú–∞—Ä—ñ—è –ö–æ–≤–∞–ª–µ–Ω–∫–æ\n"
            "‚úÖ –û–ª–µ–∫—Å—ñ–π –ü–µ—Ç—Ä–µ–Ω–∫–æ\n\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
        )
        return NEAKTYV_TO
    
    context.user_data["neaktyv_form"]["to_whom"] = name
    context.user_data["neaktyv_form"]["rank"] = rank
    # –Ø–∫—â–æ —Ü–µ —Å–∞–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á ‚Äî –æ–Ω–æ–≤–∏–º–æ –∑–≤–∞–Ω–Ω—è —É –ø—Ä–æ—Ñ—ñ–ª—ñ
    if update.effective_user and update.effective_user.id:
        # –ù–µ –∑–∞–≤–∂–¥–∏ –¥–æ—Ä–µ—á–Ω–æ, –∞–ª–µ —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∫–∞–∑–∞–≤ –∑–≤–∞–Ω–Ω—è –ø—Ä–æ —Å–µ–±–µ ‚Äî –∑–±–µ—Ä–µ–∂–µ–º–æ
        if rank:
            update_profile_fields(update.effective_user.id, rank=rank)
    await update.message.reply_text(
        "üî∏ –ö—Ä–æ–∫ 2 –∑ 3: –¢–µ—Ä–º—ñ–Ω –Ω–µ–∞–∫—Ç–∏–≤—É\n\n"
        "–í–≤–µ–¥—ñ—Ç—å —Ç–µ—Ä–º—ñ–Ω –Ω–µ–∞–∫—Ç–∏–≤—É:\n"
        "(–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 2 —Ç–∏–∂–Ω—ñ, 1 –º—ñ—Å—è—Ü—å, 3 –¥–Ω—ñ)"
    )
    return NEAKTYV_TIME

async def neaktyv_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["neaktyv_form"]["duration"] = update.message.text.strip()
    await update.message.reply_text(
        "üî∏ –ö—Ä–æ–∫ 3 –∑ 3: –í—ñ–¥–¥—ñ–ª\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–¥—ñ–ª –ù–ü–£:",
        reply_markup=ReplyKeyboardMarkup(
            [[meta["title"]] for meta in NPU_DEPARTMENTS.values()],
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )
    return NEAKTYV_DEPARTMENT

async def neaktyv_dept(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –ü—Ä–∏–π–º–∞—î–º–æ —è–∫ –∫–æ–¥ (navs/kord/...) —Ç–∞–∫ —ñ –ø–æ–≤–Ω—É –Ω–∞–∑–≤—É; –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–≤–∂–¥–∏ –ø–æ–≤–Ω—É –Ω–∞–∑–≤—É
    inp = update.message.text.strip()
    dept_title = None
    # –ü—Ä—è–º–µ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è –ø–æ –∫–æ–¥—É
    if inp in NPU_DEPARTMENTS:
        dept_title = NPU_DEPARTMENTS[inp]["title"]
    else:
        # –ü–æ—à—É–∫ –ø–æ –Ω–∞–∑–≤—ñ (–±–µ–∑ —Ä–µ–≥—ñ—Å—Ç—Ä—É)
        low = inp.lower()
        for meta in NPU_DEPARTMENTS.values():
            if meta["title"].lower() == low:
                dept_title = meta["title"]
                break
    context.user_data["neaktyv_form"]["department"] = dept_title or inp
    form = context.user_data.get("neaktyv_form", {})
    
    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
    username = update.message.from_user.username
    display_name = update.message.from_user.first_name
    author = f"@{username}" if username else display_name
    user_id = update.message.from_user.id
    
    admin_message = (
        "üìã –ù–û–í–ê –ó–ê–Ø–í–ê –ù–ê –ù–ï–ê–ö–¢–ò–í\n\n"
        "<blockquote>"
        f"1. –ö–æ–º—É –Ω–∞–¥–∞—î—Ç—å—Å—è: {display_ranked_name(form.get('rank'), form.get('to_whom'))}\n"
        f"2. –ù–∞ —Å–∫—ñ–ª—å–∫–∏ (—á–∞—Å): {form.get('duration')}\n"
        f"3. –ü—ñ–¥—Ä–æ–∑–¥—ñ–ª: {form.get('department')}\n\n"
        f"–í—ñ–¥: {author}\n"
        f"ID –∑–∞—è–≤–Ω–∏–∫–∞: {user_id}"
        "</blockquote>"
    )
    
    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç–∏", callback_data=f"approve_neaktyv_{user_id}"),
            InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_neaktyv_{user_id}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –∑–∞—è–≤–∏ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
    context.bot_data[f"neaktyv_form_{user_id}"] = form.copy()
    context.bot_data[f"neaktyv_form_{user_id}"]["author"] = author
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞—è–≤–∫—É –≤ –ë–î
    try:
        request_id = insert_neaktyv_request(
            requester_id=user_id,
            requester_username=username,
            to_whom=form.get('to_whom') or '',
            rank=form.get('rank'),
            duration=form.get('duration') or '',
            department=form.get('department') or '',
        )
        # –∑–±–µ—Ä–µ–∂–µ–º–æ id –∑–∞—è–≤–∫–∏, —â–æ–± –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å—å–∫–µ —Ä—ñ—à–µ–Ω–Ω—è –æ–Ω–æ–≤–∏–ª–æ —Å–∞–º–µ —ó—ó
        context.bot_data[f"neaktyv_req_id_{user_id}"] = request_id
        # –ó–∞–≥–∞–ª—å–Ω–∏–π –ª–æ–≥ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏
        try:
            log_action(
                actor_id=user_id,
                actor_username=username,
                action="neaktyv_request_created",
                target_user_id=None,
                target_username=None,
                details=f"request_id={request_id}; to={form.get('to_whom')}; duration={form.get('duration')}; dept={form.get('department')}",
            )
        except Exception:
            pass
    except Exception as dbe:
        logger.error(f"DB insert neaktyv failed: {dbe}")

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=admin_message,
                reply_markup=reply_markup,
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
    
    await update.message.reply_text(
        "‚úÖ –ó–∞—è–≤—É –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –¥–ª—è —Ä–æ–∑–≥–ª—è–¥—É.",
        reply_markup=ReplyKeyboardRemove()
    )
    
    context.user_data.pop("neaktyv_form", None)
    return ConversationHandler.END

async def neaktyv_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.pop("neaktyv_form", None)
    await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

############################
# –ú–û–î–ï–†–ê–¶–Ü–Ø –ó–ê–Ø–í –ù–ê –ù–ï–ê–ö–¢–ò–í
############################

async def handle_neaktyv_moderation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –∑–∞—è–≤ –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤"""
    query = update.callback_query
    await query.answer()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if query.from_user.id not in ADMIN_IDS:
        await query.edit_message_text("‚ùå –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return ConversationHandler.END
    
    # –ü–∞—Ä—Å–∏–Ω–≥ callback_data
    if query.data.startswith("approve_neaktyv_"):
        action = "approve"
        user_id = int(query.data.split("_")[2])
    elif query.data.startswith("reject_neaktyv_"):
        action = "reject"
        user_id = int(query.data.split("_")[2])
    else:
        return ConversationHandler.END
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –æ–±—Ä–æ–±–∫–∏
    context.user_data["moderation_action"] = action
    context.user_data["moderation_user_id"] = user_id
    context.user_data["original_message_id"] = query.message.message_id
    
    # –ó–∞–ø–∏—Ç—É—î–º–æ —ñ–º'—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    action_text = "–æ–¥–æ–±—Ä–µ–Ω–Ω—è" if action == "approve" else "–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è"
    await query.edit_message_text(
        f"üìù {action_text.capitalize()} –∑–∞—è–≤–∏\n\n"
        f"–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è {action_text}:\n"
        "(–£–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, –ø–æ–≤–Ω–µ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ)"
    )
    
    return NEAKTYV_APPROVAL_NAME

async def process_neaktyv_approval_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"""
    name = update.message.text.strip()
    
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ —ñ–º–µ–Ω—ñ
    if not re.match(r'^[–ê-–Ø“ê–Ü–á–Ñ–Å][–∞-—è“ë—ñ—ó—î—ë\']*\s+[–ê-–Ø“ê–Ü–á–Ñ–Å][–∞-—è“ë—ñ—ó—î—ë\']*$', name):
        await update.message.reply_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è!\n\n"
            "–Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –ø–æ–≤–∏–Ω–Ω—ñ:\n"
            "‚Ä¢ –ë—É—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é\n"
            "‚Ä¢ –ü–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ –≤–µ–ª–∏–∫–∏—Ö –ª—ñ—Ç–µ—Ä\n"
            "‚Ä¢ –ú—ñ—Å—Ç–∏—Ç–∏ –ª–∏—à–µ –ª—ñ—Ç–µ—Ä–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤—ñ—Ç—É\n\n"
            "–ü—Ä–∏–∫–ª–∞–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è:\n"
            "‚úÖ –û–ª–µ–∫—Å—ñ–π –ü–µ—Ç—Ä–µ–Ω–∫–æ\n"
            "‚úÖ –ú–∞—Ä—ñ—è –ö–æ–≤–∞–ª–µ–Ω–∫–æ\n"
            "‚úÖ –î–º–∏—Ç—Ä–æ –û'–ö–æ–Ω–Ω–æ—Ä\n\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
        )
        return NEAKTYV_APPROVAL_NAME
    
    action = context.user_data.get("moderation_action")
    user_id = context.user_data.get("moderation_user_id")
    original_message_id = context.user_data.get("original_message_id")
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ –∑–∞—è–≤–∏
    form_key = f"neaktyv_form_{user_id}"
    form = context.bot_data.get(form_key)
    
    if not form:
        await update.message.reply_text("‚ùå –î–∞–Ω—ñ –∑–∞—è–≤–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ú–æ–∂–ª–∏–≤–æ, –≤–æ–Ω–∞ –≤–∂–µ –±—É–ª–∞ –æ–±—Ä–æ–±–ª–µ–Ω–∞.")
        return ConversationHandler.END
    
    if action == "approve":
        # –û–¥–æ–±—Ä–µ–Ω–Ω—è - —Ä–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ç–∞ –ø—É–±–ª—ñ–∫—É—î–º–æ –≤ –≥—Ä—É–ø—É
        # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–∂–ª–∏–≤–µ –∑–≤–∞–Ω–Ω—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        disp_name = display_ranked_name(form.get('rank'), form.get('to_whom'))
        admin_edit_message = (
            "‚úÖ –ó–ê–Ø–í–ê –û–î–û–ë–†–ï–ù–ê\n\n"
            "<blockquote>"
            f"1. –ö–æ–º—É –Ω–∞–¥–∞—î—Ç—å—Å—è: {disp_name}\n"
            f"2. –ù–∞ —Å–∫—ñ–ª—å–∫–∏ (—á–∞—Å): {form.get('duration')}\n"
            f"3. –ü—ñ–¥—Ä–æ–∑–¥—ñ–ª: {form.get('department')}\n\n"
            f"–í—ñ–¥: {form.get('author')}\n"
            f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {name}"
            "</blockquote>"
        )
        
        group_message = (
            "üü¶ –ó–ê–Ø–í–ê –ù–ê –ù–ï–ê–ö–¢–ò–í\n\n"
            "<blockquote>"
            f"1. –ö–æ–º—É –Ω–∞–¥–∞—î—Ç—å—Å—è: {disp_name}\n"
            f"2. –ù–∞ —Å–∫—ñ–ª—å–∫–∏ (—á–∞—Å): {form.get('duration')}\n"
            f"3. –ü—ñ–¥—Ä–æ–∑–¥—ñ–ª: {form.get('department')}\n\n"
            f"–í—ñ–¥: {form.get('author')}\n"
            f"–ü–µ—Ä–µ–≤—ñ—Ä—è—é—á–∏–π: {name}"
            "</blockquote>"
        )
        
        try:
            # –†–µ–¥–∞–≥—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=original_message_id,
                text=admin_edit_message,
                parse_mode="HTML"
            )
            
            # –ü—É–±–ª—ñ–∫—É—î–º–æ –≤ –≥—Ä—É–ø—É
            await context.bot.send_message(
                chat_id=REPORTS_CHAT_ID,
                text=group_message,
                message_thread_id=AFK_TOPIC_ID,
                parse_mode="HTML"
            )
            # –õ–æ–≥ —Ä—ñ—à–µ–Ω–Ω—è –≤ –ë–î
            try:
                req_id = context.bot_data.get(f"neaktyv_req_id_{user_id}")
                if req_id:
                    decide_neaktyv_request(
                        request_id=req_id,
                        status='approved',
                        moderator_name=name,
                        moderator_user_id=update.effective_user.id,
                    )
                    try:
                        log_action(
                            actor_id=update.effective_user.id,
                            actor_username=update.effective_user.username,
                            action="neaktyv_approved",
                            target_user_id=user_id,
                            target_username=None,
                            details=f"request_id={req_id}; moderator={name}",
                        )
                    except Exception:
                        pass
            except Exception as dbe:
                logger.error(f"DB decide neaktyv approve failed: {dbe}")
            await update.message.reply_text(f"‚úÖ –ó–∞—è–≤—É –æ–¥–æ–±—Ä–µ–Ω–æ —Ç–∞ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –≥—Ä—É–ø—ñ!")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞—è–≤–∏: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞—è–≤–∏.")
    else:
        # –í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è - —Ä–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        disp_name = display_ranked_name(form.get('rank'), form.get('to_whom'))
        admin_edit_message = (
            "‚ùå –ó–ê–Ø–í–ê –í–Ü–î–•–ò–õ–ï–ù–ê\n\n"
            "<blockquote>"
            f"1. –ö–æ–º—É –Ω–∞–¥–∞—î—Ç—å—Å—è: {disp_name}\n"
            f"2. –ù–∞ —Å–∫—ñ–ª—å–∫–∏ (—á–∞—Å): {form.get('duration')}\n"
            f"3. –ü—ñ–¥—Ä–æ–∑–¥—ñ–ª: {form.get('department')}\n\n"
            f"–í—ñ–¥: {form.get('author')}\n"
            f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {name}"
            "</blockquote>"
        )
        
        try:
            # –†–µ–¥–∞–≥—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=original_message_id,
                text=admin_edit_message,
                parse_mode="HTML"
            )
            # –õ–æ–≥ —Ä—ñ—à–µ–Ω–Ω—è –≤ –ë–î
            try:
                req_id = context.bot_data.get(f"neaktyv_req_id_{user_id}")
                if req_id:
                    decide_neaktyv_request(
                        request_id=req_id,
                        status='rejected',
                        moderator_name=name,
                        moderator_user_id=update.effective_user.id,
                    )
                    try:
                        log_action(
                            actor_id=update.effective_user.id,
                            actor_username=update.effective_user.username,
                            action="neaktyv_rejected",
                            target_user_id=user_id,
                            target_username=None,
                            details=f"request_id={req_id}; moderator={name}",
                        )
                    except Exception:
                        pass
            except Exception as dbe:
                logger.error(f"DB decide neaktyv reject failed: {dbe}")
            await update.message.reply_text(f"‚ùå –ó–∞—è–≤—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è.")
    
    # –û—á–∏—â—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ
    context.bot_data.pop(form_key, None)
    context.user_data.pop("moderation_action", None)
    context.user_data.pop("moderation_user_id", None)
    context.user_data.pop("original_message_id", None)
    
    return ConversationHandler.END

async def cancel_neaktyv_moderation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó"""
    context.user_data.pop("moderation_action", None)
    context.user_data.pop("moderation_user_id", None)
    context.user_data.pop("original_message_id", None)
    await update.message.reply_text("‚ùå –ú–æ–¥–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "request_access":
        await query.edit_message_text(
            "üìù –ö—Ä–æ–∫ 1: –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ\n\n"
            "<blockquote>‚ö†Ô∏è –í–ê–ñ–õ–ò–í–û:\n"
            "‚Ä¢ –¢—ñ–ª—å–∫–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é\n"
            "‚Ä¢ –ü–æ–≤–Ω–µ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ\n"
            "‚Ä¢ –ë–µ–∑ —Å–∫–æ—Ä–æ—á–µ–Ω—å —Ç–∞ –∞–±—Ä–µ–≤—ñ–∞—Ç—É—Ä\n\n"
            "–ü—Ä–∏–∫–ª–∞–¥: –Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ</blockquote>",
            parse_mode="HTML"
        )
        context.user_data['awaiting_application'] = True
        context.user_data['step'] = 'waiting_name'
    
    elif query.data.startswith("npu_"):
        npu_code = query.data.split("_")[1]
        await select_npu_department(update, context, npu_code)
    elif query.data.startswith("rank_"):
        # –í—ã–±–æ—Ä —Ä–∞–Ω–≥–∞ –≤ –∞–Ω–∫–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞
        rank_idx = int(query.data.split("_")[1])
        if 0 <= rank_idx < len(NPU_RANKS):
            rank = NPU_RANKS[rank_idx]
            user_id = update.effective_user.id
            if user_id in USER_APPLICATIONS:
                USER_APPLICATIONS[user_id]['rank'] = rank
                update_profile_fields(user_id, rank=rank)
                try:
                    log_profile_update(user_id=user_id, fields={"rank": rank}, images_count=None, source="apply")
                except Exception:
                    pass
                await query.edit_message_text(
                    f"‚úÖ –ó–≤–∞–Ω–Ω—è –æ–±—Ä–∞–Ω–æ: {rank}\n\n"
                    "üìù –ö—Ä–æ–∫ 3: –ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏ (2 —à—Ç)\n\n"
                    "–ü–æ—Ç—Ä—ñ–±–Ω—ñ: –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è —Ç–∞ —Ç—Ä—É–¥–æ–≤–∞ –∫–Ω–∏–∂–∫–∞. –†–æ–∑–º—ñ—Å—Ç—ñ—Ç—å –Ω–∞ imgbb/imgur/postimg —Ç–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ø—Ä—è–º—ñ URL, –∫–æ–∂–µ–Ω –∑ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞."
                )
                context.user_data['step'] = 'waiting_image_urls'
                USER_APPLICATIONS[user_id]['step'] = 'waiting_image_urls'
    
    elif query.data.startswith("approve_"):
        user_id = int(query.data.split("_")[1])
        await approve_request(update, context, user_id)
    
    elif query.data.startswith("reject_"):
        user_id = int(query.data.split("_")[1])
        await reject_request(update, context, user_id)

async def handle_application_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∑–∞—è–≤–æ–∫"""
    user = update.effective_user
    user_id = user.id
    message_text = update.message.text
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    logger.info(f"handle_application_text: User {user_id} sent: '{message_text}'")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –º–æ–∂–µ –±—É—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–æ—Å–∏–ª–∞–Ω—å (—è–∫—â–æ —î –ø—Ä–∏–Ω–∞–π–º–Ω—ñ 2 —Ä—è–¥–∫–∏, —â–æ –≤–∏–≥–ª—è–¥–∞—é—Ç—å —è–∫ URL)
    lines = [line.strip() for line in message_text.split('\n') if line.strip()]
    url_pattern = re.compile(r'^https?://')
    url_lines = [line for line in lines if url_pattern.match(line)]
    
    # –Ø–∫—â–æ —î 2 –∞–±–æ –±—ñ–ª—å—à–µ –ø–æ—Å–∏–ª–∞–Ω—å, –æ–±—Ä–æ–±–ª—è—î–º–æ —è–∫ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    if len(url_lines) >= 2:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –≤ —Å–∏—Å—Ç–µ–º—ñ
        if user_id not in USER_APPLICATIONS:
            # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —â–µ –Ω–µ –ø–æ—á–∏–Ω–∞–≤ –ø—Ä–æ—Ü–µ—Å, —Å—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤–∏–π –∑–∞–ø–∏—Å
            USER_APPLICATIONS[user_id] = {
                'user': user,
                'name': None,
                'npu_department': None,
                'image_urls': [],
                'step': 'waiting_image_urls'
            }
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –∫—Ä–æ–∫ –Ω–∞ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å, —è–∫—â–æ —â–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        if USER_APPLICATIONS[user_id]['step'] != 'waiting_image_urls':
            USER_APPLICATIONS[user_id]['step'] = 'waiting_image_urls'
        
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ–±—Ä–æ–±–∫—É –ø–æ—Å–∏–ª–∞–Ω—å
        await handle_image_urls_application(update, context)
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –º–æ–∂–µ –±—É—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–æ—Å–∏–ª–∞–Ω—å (—è–∫—â–æ —î –ø—Ä–∏–Ω–∞–π–º–Ω—ñ 2 —Ä—è–¥–∫–∏, —â–æ –≤–∏–≥–ª—è–¥–∞—é—Ç—å —è–∫ URL)
    lines = [line.strip() for line in message_text.split('\n') if line.strip()]
    url_pattern = re.compile(r'^https?://')
    url_lines = [line for line in lines if url_pattern.match(line)]
    
    # –Ø–∫—â–æ —î 2 –∞–±–æ –±—ñ–ª—å—à–µ –ø–æ—Å–∏–ª–∞–Ω—å, –æ–±—Ä–æ–±–ª—è—î–º–æ —è–∫ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    if len(url_lines) >= 2:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –≤ —Å–∏—Å—Ç–µ–º—ñ
        if user_id not in USER_APPLICATIONS:
            # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —â–µ –Ω–µ –ø–æ—á–∏–Ω–∞–≤ –ø—Ä–æ—Ü–µ—Å, —Å—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤–∏–π –∑–∞–ø–∏—Å
            USER_APPLICATIONS[user_id] = {
                'user': user,
                'name': None,
                'npu_department': None,
                'image_urls': [],
                'step': 'waiting_image_urls'
            }
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –∫—Ä–æ–∫ –Ω–∞ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å, —è–∫—â–æ —â–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        if USER_APPLICATIONS[user_id]['step'] != 'waiting_image_urls':
            USER_APPLICATIONS[user_id]['step'] = 'waiting_image_urls'
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ, —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ –ø—Ä–æ—Ü–µ—Å—ñ –ø–æ–¥–∞—á—ñ –∑–∞—è–≤–∫–∏
        context.user_data['awaiting_application'] = True
        context.user_data['step'] = 'waiting_image_urls'
        
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ–±—Ä–æ–±–∫—É –ø–æ—Å–∏–ª–∞–Ω—å
        await handle_image_urls_application(update, context)
        return
    
    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—ñ –ø–æ–¥–∞—á—ñ –∑–∞—è–≤–∫–∏
    if not context.user_data.get('awaiting_application'):
        logger.info(f"User {user_id} not in application process, ignoring text: '{message_text}'")
        return
    
    step = context.user_data.get('step', 'waiting_name')
    
    if step == 'waiting_name':
        await handle_name_input(update, context)
    elif step == 'waiting_image_urls':
        await handle_image_urls_application(update, context)

async def handle_name_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–∞"""
    user = update.effective_user
    user_id = user.id
    name_input = update.message.text.strip()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ–º'—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
    if not is_ukrainian_name(name_input):
        await update.message.reply_text(
            "‚ùå –Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –º–∞—é—Ç—å –±—É—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é!\n\n"
            "–ü—Ä–∏–∫–ª–∞–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É:\n"
            "‚úÖ –û–ª–µ–∫—Å–∞–Ω–¥—Ä –Ü–≤–∞–Ω–µ–Ω–∫–æ\n"
            "‚úÖ –ú–∞—Ä—ñ—è –ü–µ—Ç—Ä–µ–Ω–∫–æ-–ö–æ–≤–∞–ª–µ–Ω–∫–æ\n"
            "‚úÖ –ê–Ω–Ω–∞-–ú–∞—Ä—ñ—è –°–∏–¥–æ—Ä–µ–Ω–∫–æ\n\n"
            "‚ùå –ù–ï–ø—Ä–∞–≤–∏–ª—å–Ω–æ:\n"
            "‚Ä¢ Alexander Ivanov (–∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é)\n"
            "‚Ä¢ –û–ª–µ–∫—Å–∞–Ω–¥—Ä –Ü. (—Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è)\n"
            "‚Ä¢ –°–∞—à–∞ (–Ω–µ–ø–æ–≤–Ω–µ —ñ–º'—è)\n\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
        )
        return
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–º'—è —Ç–∞ –ø–æ–∫–∞–∑—É—î–º–æ –≤–∏–±—ñ—Ä –ù–ü–£
    if user_id not in USER_APPLICATIONS:
        USER_APPLICATIONS[user_id] = {
            'user': user,
            'name': None,
            'npu_department': None,
            'image_urls': [],
            'step': 'waiting_name'
        }
    
    USER_APPLICATIONS[user_id]['name'] = name_input
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–º'—è —É –≥—Ä—ñ –≤ –ø—Ä–æ—Ñ—ñ–ª—å
    update_profile_fields(user_id, in_game_name=name_input)
    try:
        log_profile_update(user_id=user_id, fields={"in_game_name": name_input}, images_count=None, source="apply")
    except Exception:
        pass
    context.user_data['step'] = 'waiting_npu' # FIX: Update user_data context
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –ù–ü–£
    keyboard = []
    for code, meta in NPU_DEPARTMENTS.items():
        keyboard.append([InlineKeyboardButton(meta["title"], callback_data=f"npu_{code}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"‚úÖ –Ü–º'—è –ø—Ä–∏–π–Ω—è—Ç–æ: {name_input}\n\n"
        "üìù –ö—Ä–æ–∫ 2: –û–±–µ—Ä—ñ—Ç—å –≤–∞—à–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ù–ü–£\n\n"
        "‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ñ —Ç—ñ–ª—å–∫–∏ —Ü—ñ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥–ª—è UKRAINE GTA:",
        reply_markup=reply_markup
    )

async def select_npu_department(update: Update, context: ContextTypes.DEFAULT_TYPE, npu_code: str) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ù–ü–£"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    user_id = user.id
    
    if user_id not in USER_APPLICATIONS:
        await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ –∑–∞—è–≤–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–æ—á–Ω—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É –∑ /start")
        return
    
    if npu_code not in NPU_DEPARTMENTS:
        await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–≤—ñ–¥–æ–º–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ù–ü–£")
        return
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä –ù–ü–£
    USER_APPLICATIONS[user_id]['npu_department'] = NPU_DEPARTMENTS[npu_code]["title"]
    # –û–Ω–æ–≤–ª—é—î–º–æ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª —É –ø—Ä–æ—Ñ—ñ–ª—ñ
    update_profile_fields(user_id, npu_department=NPU_DEPARTMENTS[npu_code]["title"])
    try:
        log_profile_update(user_id=user_id, fields={"npu_department": NPU_DEPARTMENTS[npu_code]["title"]}, images_count=None, source="apply")
    except Exception:
        pass
    USER_APPLICATIONS[user_id]['step'] = 'waiting_rank'
    context.user_data['step'] = 'waiting_rank'

    # –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –∑–≤–∞–Ω–∏—è
    rank_buttons = []
    row = []
    for idx, rank in enumerate(NPU_RANKS):
        row.append(InlineKeyboardButton(rank, callback_data=f"rank_{idx}"))
        if len(row) == 2:
            rank_buttons.append(row)
            row = []
    if row:
        rank_buttons.append(row)
    meta = NPU_DEPARTMENTS[npu_code]
    desc = (
        f"‚úÖ –û–±—Ä–∞–Ω–æ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª: <b>{meta['title']}</b> {meta['tag']}\n"
        f"–ú—ñ—Å—Ü–µ: {meta['location']}\n"
        f"–î–æ–ø—É—Å–∫: {meta['eligibility']}\n\n"
        f"{meta['desc']}\n\n"
        "üìù –ö—Ä–æ–∫ 3: –û–±–µ—Ä—ñ—Ç—å –≤–∞—à–µ –∑–≤–∞–Ω–Ω—è"
    )
    await query.edit_message_text(desc, reply_markup=InlineKeyboardMarkup(rank_buttons), parse_mode="HTML")

async def handle_image_urls_application(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –∑–∞—è–≤–æ–∫"""
    user = update.effective_user
    user_id = user.id

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –Ω–∞–¥—ñ—Å–ª–∞–≤ —Ç–µ–∫—Å—Ç
    if user_id not in USER_APPLICATIONS:
        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î –≤ —Å–ø–∏—Å–∫—É, —Å—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤–∏–π –∑–∞–ø–∏—Å
        USER_APPLICATIONS[user_id] = {
            'user': user,
            'name': None,
            'npu_department': None,
            'image_urls': [],
            'step': 'waiting_image_urls'
        }
    
    user_data = USER_APPLICATIONS[user_id]
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –∫—Ä–æ–∫, —è–∫—â–æ —â–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π
    if user_data.get('step') != 'waiting_image_urls':
        user_data['step'] = 'waiting_image_urls'
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ —Ä–æ–∑–¥—ñ–ª—è—î–º–æ –Ω–∞ —Ä—è–¥–∫–∏
    message_text = update.message.text.strip()
    urls = [url.strip() for url in message_text.split('\n') if url.strip()]
    
    if len(urls) < 2:
        await update.message.reply_text(
            "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º—ñ–Ω—ñ–º—É–º 2 –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:\n"
            "1. –°–∫—Ä—ñ–Ω—à–æ—Ç –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è\n"
            "2. –°–∫—Ä—ñ–Ω—à–æ—Ç —Ç—Ä—É–¥–æ–≤–æ—ó –∫–Ω–∏–∂–∫–∏\n\n"
            "–ö–æ–∂–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞."
        )
        return
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –±–µ–∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
    user_data['image_urls'] = urls
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ë–î
    replace_profile_images(user_id, urls)
    
    await finalize_application(update, context, user_id)

def get_image_info(url: str) -> str:
    """–û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return f"üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è: {url}"

async def finalize_application(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int) -> None:
    """–ó–∞–≤–µ—Ä—à—É—î–º–æ –æ–±—Ä–æ–±–∫—É –∑–∞—è–≤–∫–∏"""
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ —Å–ø–∏—Å–∫—É
    if user_id not in USER_APPLICATIONS:
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ –∑–∞—è–≤–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É –∑ /start")
        return
    
    user_data = USER_APPLICATIONS[user_id]
    user = user_data['user']
    
    # –Ø–∫—â–æ —ñ–º'—è –Ω–µ –≤–∫–∞–∑–∞–Ω–µ, –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ –ø—Ä–æ—Ñ—ñ–ª—é –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ–º'—è –∑ Telegram
    if not user_data.get('name'):
        profile = get_profile(user_id)
        if profile and profile.get('in_game_name'):
            user_data['name'] = profile['in_game_name']
        else:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ–º'—è –∑ Telegram, —è–∫—â–æ –Ω–µ–º–∞—î —ñ–Ω—à–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É
            user_data['name'] = f"{user.first_name} {user.last_name or ''}".strip()
    
    # –Ø–∫—â–æ –Ω–µ–º–∞—î –≤–∏–±—Ä–∞–Ω–æ–≥–æ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—É, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    if not user_data.get('npu_department'):
        user_data['npu_department'] = "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞—è–≤–∫—É –¥–ª—è –æ–±—Ä–æ–±–∫–∏
    PENDING_REQUESTS[user_id] = {
        'user': user,
        'name': user_data['name'],
        'npu_department': user_data['npu_department'],
        'image_urls': user_data['image_urls']
    }

    # –õ–æ–≥ –∑–∞—è–≤–∫–∏ –Ω–∞ –¥–æ—Å—Ç—É–ø —É –ë–î
    try:
        insert_access_application(
            user_id=user.id,
            username=user.username,
            in_game_name=user_data['name'],
            npu_department=user_data['npu_department'],
            rank=USER_APPLICATIONS[user_id].get('rank'),
            images=user_data['image_urls'],
        )
        try:
            # –ó–Ω—ñ–º–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é —Ç–∞ –ª–æ–≥ –¥—ñ—ó
            log_profile_update(
                user_id=user.id,
                fields={
                    "in_game_name": user_data.get('name'),
                    "npu_department": user_data.get('npu_department'),
                    "rank": USER_APPLICATIONS[user_id].get('rank'),
                },
                images_count=len(user_data.get('image_urls') or []),
                source="apply",
            )
            log_action(
                actor_id=user.id,
                actor_username=user.username,
                action="access_application_submitted",
                target_user_id=user.id,
                target_username=user.username,
                details=f"images={len(user_data.get('image_urls') or [])}",
            )
        except Exception:
            pass
    except Exception as dbe:
        logger.error(f"DB insert access_application failed: {dbe}")

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await update.message.reply_text(
        "‚úÖ –í–∞—à—É –∑–∞—è–≤–∫—É –ø–æ–≤–Ω—ñ—Å—Ç—é –æ—Ç—Ä–∏–º–∞–Ω–æ!\n\n"
        f"üë§ –Ü–º'—è: {user_data['name']}\n"
        f"üéñÔ∏è –ó–≤–∞–Ω–Ω—è: {user_data.get('rank') or '‚Äî'}\n"
        f"üèõÔ∏è –ü—ñ–¥—Ä–æ–∑–¥—ñ–ª –ù–ü–£: {user_data.get('npu_department') or '‚Äî'}\n"
        f"üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {len(user_data['image_urls'])}\n\n"
        "–û—á—ñ–∫—É–π—Ç–µ –Ω–∞ —Ä–æ–∑–≥–ª—è–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
        "–í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∫–æ–ª–∏ –∑–∞—è–≤–∫—É –±—É–¥–µ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–æ."
    )

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞—è–≤–∫—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –°—Ö–≤–∞–ª–∏—Ç–∏", callback_data=f"approve_{user_id}"),
            InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{user_id}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∑–æ–±—Ä–∞–∂–µ–Ω—å –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    images_list = "\n".join([f"{i+1}. {url}" for i, url in enumerate(user_data['image_urls'])])

    admin_message = (
        "üÜï –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø!\n\n"
        f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.first_name} {user.last_name or ''}\n"
        f"üÜî ID: {user.id}\n"
        f"üì± –ù—ñ–∫–Ω–µ–π–º: @{user.username or '–Ω–µ–º–∞—î'}\n\n"
        f"üìù –ó–∞—è–≤–∫–∞:\n"
        f"üë§ –Ü–º'—è: {user_data['name']}\n"
        f"üéñÔ∏è –ó–≤–∞–Ω–Ω—è: {user_data.get('rank') or '‚Äî'}\n"
        f"üèõÔ∏è –ü—ñ–¥—Ä–æ–∑–¥—ñ–ª –ù–ü–£: {user_data.get('npu_department') or '‚Äî'}\n\n"
        f"üîó –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è ({len(user_data['image_urls'])}):\n{images_list}"
    )

    for admin_id in ADMIN_IDS:
        try:
            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏
            await context.bot.send_message(
                chat_id=admin_id,
                text=admin_message,
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

    # –û—á–∏—â—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    context.user_data['awaiting_application'] = False
    if user_id in USER_APPLICATIONS:
        del USER_APPLICATIONS[user_id]

async def approve_request(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int) -> None:
    """–°—Ö–≤–∞–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏"""
    query = update.callback_query
    
    if user_id not in PENDING_REQUESTS:
        await query.edit_message_text("‚ùå –ó–∞—è–≤–∫—É –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    user_data = PENDING_REQUESTS[user_id]
    user = user_data['user']
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
    try:
        user_display_name = f"{user.first_name} {user.last_name or ''}".strip()
        if user.username:
            user_display_name += f" (@{user.username})"
        
        invite_link = await create_invite_link(context, user_display_name)
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        invite_message = (
            "üéâ –í—ñ—Ç–∞—î–º–æ!\n\n"
            "–í–∞—à—É –∑–∞—è–≤–∫—É —Å—Ö–≤–∞–ª–µ–Ω–æ! –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –¥–æ –≥—Ä—É–ø–∏ –ø–æ–ª—ñ—Ü—ñ—ó UKRAINE GTA.\n\n"
            "<blockquote>üîó –í–∞—à–µ –æ—Å–æ–±–∏—Å—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:\n"
            f"{invite_link}</blockquote>\n\n"
            "<blockquote>‚ö†Ô∏è –í–ê–ñ–õ–ò–í–û:\n"
            "‚Ä¢ –¶–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å\n"
            "‚Ä¢ –í–æ–Ω–æ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–µ - –º–æ–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –æ–¥–Ω–∞ –ª—é–¥–∏–Ω–∞\n"
            "‚Ä¢ –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –π–æ–≥–æ —ñ–Ω—à–∏–º\n"
            "‚Ä¢ –ü—ñ—Å–ª—è –≤—Å—Ç—É–ø—É –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Å—Ç–∞–Ω–µ –Ω–µ–¥—ñ–π—Å–Ω–∏–º</blockquote>"
        )
        
        await context.bot.send_message(
            chat_id=user_id,
            text=invite_message,
            disable_web_page_preview=True,
            parse_mode="HTML"
        )
        
    # (–û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –∫–æ–º–∞–Ω–¥–æ—é /start –ø—Ä–∏–±—Ä–∞–Ω–æ –∑–∞ –≤–∏–º–æ–≥–æ—é)
        
        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–æ —É—Å–ø—ñ—Ö
        await query.edit_message_text(
            f"‚úÖ –ó–∞—è–≤–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.first_name} ({user.id}) —Å—Ö–≤–∞–ª–µ–Ω–æ!\n\n"
            f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_display_name}\n"
            f"üîó –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: {invite_link[:50]}...\n"
            f"üìä –õ—ñ–º—ñ—Ç –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—å: 1 —Ä–∞–∑\n\n"
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è."
        )
        # –õ–æ–≥ —Ä—ñ—à–µ–Ω–Ω—è –ø–æ –∑–∞—è–≤—Ü—ñ —É –ë–î
        try:
            decide_access_application(
                user_id=user.id,
                decision='approved',
                decided_by_admin_id=update.effective_user.id,
                decided_by_username=update.effective_user.username,
                invite_link=invite_link,
            )
        except Exception as dbe:
            logger.error(f"DB decide access approve failed: {dbe}")
        # –ó–∞–≥–∞–ª—å–Ω–∏–π –ª–æ–≥ —Ä—ñ—à–µ–Ω–Ω—è
        try:
            log_action(
                actor_id=update.effective_user.id,
                actor_username=update.effective_user.username,
                action="access_approved",
                target_user_id=user.id,
                target_username=user.username,
                details=f"invite_link={invite_link}",
            )
        except Exception:
            pass
        
        logger.info(f"–ó–∞—è–≤–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_display_name} ({user.id}) —Å—Ö–≤–∞–ª–µ–Ω–æ, —Å—Ç–≤–æ—Ä–µ–Ω–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: {invite_link}")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ö–≤–∞–ª–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.id}: {e}")
        await query.edit_message_text(
            f"‚ö†Ô∏è –ó–∞—è–≤–∫—É —Å—Ö–≤–∞–ª–µ–Ω–æ, –∞–ª–µ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è.\n"
            f"–ü–æ–º–∏–ª–∫–∞: {str(e)}\n\n"
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –æ—Å–Ω–æ–≤–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≥—Ä—É–ø—É."
        )
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –æ—Å–Ω–æ–≤–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —è–∫ —Ä–µ–∑–µ—Ä–≤
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=(
                    "üéâ –í—ñ—Ç–∞—î–º–æ!\n\n"
                    "–í–∞—à—É –∑–∞—è–≤–∫—É —Å—Ö–≤–∞–ª–µ–Ω–æ! –í–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä—É–ø–∏ –∑–∞ –æ—Å–Ω–æ–≤–Ω–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\n\n"
                    f"<blockquote>üîó {GROUP_INVITE_LINK}</blockquote>"
                ),
                disable_web_page_preview=True,
                parse_mode="HTML"
            )
        except Exception as e2:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–∞–≤—ñ—Ç—å –æ—Å–Ω–æ–≤–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user.id}: {e2}")
        # –õ–æ–≥ —Ä—ñ—à–µ–Ω–Ω—è –ø–æ –∑–∞—è–≤—Ü—ñ —É –ë–î (approve –±–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —ñ–Ω–≤–∞–π—Ç—É)
        try:
            decide_access_application(
                user_id=user.id,
                decision='approved',
                decided_by_admin_id=update.effective_user.id,
                decided_by_username=update.effective_user.username,
                invite_link=GROUP_INVITE_LINK,
            )
        except Exception as dbe:
            logger.error(f"DB decide access approve(fallback) failed: {dbe}")
        try:
            log_action(
                actor_id=update.effective_user.id,
                actor_username=update.effective_user.username,
                action="access_approved_fallback",
                target_user_id=user.id,
                target_username=user.username,
                details=f"invite_link={GROUP_INVITE_LINK}",
            )
        except Exception:
            pass
    
    # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞—è–≤–∫—É –∑—ñ —Å–ø–∏—Å–∫—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
    del PENDING_REQUESTS[user_id]

async def reject_request(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int) -> None:
    """–í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏"""
    query = update.callback_query
    
    if user_id not in PENDING_REQUESTS:
        await query.edit_message_text("‚ùå –ó–∞—è–≤–∫—É –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    user_data = PENDING_REQUESTS[user_id]
    user = user_data['user']
    
    # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=(
                "üòî –ù–∞ –∂–∞–ª—å, –≤–∞—à—É –∑–∞—è–≤–∫—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.\n\n"
                "–í–∏ –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ, "
                "–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤—à–∏ –∫–æ–º–∞–Ω–¥—É /start."
            )
        )
        
        await query.edit_message_text(
            f"‚ùå –ó–∞—è–≤–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.first_name} ({user.id}) –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.\n"
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–æ."
        )
    except Exception as e:
        await query.edit_message_text(
            f"‚ö†Ô∏è –ó–∞—è–≤–∫—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ, –∞–ª–µ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É: {e}"
        )
    # –õ–æ–≥ —Ä—ñ—à–µ–Ω–Ω—è –ø–æ –∑–∞—è–≤—Ü—ñ —É –ë–î
    try:
        decide_access_application(
            user_id=user.id,
            decision='rejected',
            decided_by_admin_id=update.effective_user.id,
            decided_by_username=update.effective_user.username,
            invite_link=None,
        )
    except Exception as dbe:
        logger.error(f"DB decide access reject failed: {dbe}")
    try:
        log_action(
            actor_id=update.effective_user.id,
            actor_username=update.effective_user.username,
            action="access_rejected",
            target_user_id=user.id,
            target_username=user.username,
            details=None,
        )
    except Exception:
        pass
    
    # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞—è–≤–∫—É –∑—ñ —Å–ø–∏—Å–∫—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
    del PENDING_REQUESTS[user_id]

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    
    pending_count = len(PENDING_REQUESTS)
    await update.message.reply_text(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"–ó–∞—è–≤–æ–∫ –≤ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ: {pending_count}"
    )

async def logs_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê–¥–º-–∫–æ–º–∞–Ω–¥–∞: –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–µ–π—Å—Ç–≤–∏–π, —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –¥–∞—Ç–µ/–∞–∫—Ç–µ—Ä—É/–¥–µ–π—Å—Ç–≤–∏—é.\n
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /logs [limit] [action=<x>] [actor_id=<id>] [actor=@name] [from=YYYY-MM-DD] [to=YYYY-MM-DD]
    """
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
        return
    args = context.args or []
    limit = 50
    kw = {"actor_id": None, "actor_username": None, "action": None, "date_from": None, "date_to": None}
    for a in args:
        if a.isdigit():
            limit = max(1, min(500, int(a)))
        elif a.startswith("action="):
            kw["action"] = a.split("=",1)[1]
        elif a.startswith("actor_id="):
            try:
                kw["actor_id"] = int(a.split("=",1)[1])
            except Exception:
                pass
        elif a.startswith("actor="):
            kw["actor_username"] = a.split("=",1)[1]
        elif a.startswith("from="):
            kw["date_from"] = a.split("=",1)[1]
        elif a.startswith("to="):
            kw["date_to"] = a.split("=",1)[1]
    rows = query_action_logs(limit=limit, **kw)
    if not rows:
        await update.message.reply_text("–ü–æ—Ä–æ–∂–Ω—å–æ.")
        return
    lines = []
    for r in rows:
        actor = f"{r['actor_id']} (@{r['actor_username']})" if r.get('actor_username') else str(r.get('actor_id'))
        target = (f" -> {r['target_user_id']} (@{r['target_username']})" if r.get('target_user_id') else "")
        det = f" | {r['details']}" if r.get('details') else ""
        lines.append(f"[{r['created_at']}] {actor}: {r['action']}{target}{det}")
    text = "\n".join(lines[:1000])
    await update.message.reply_text(f"<b>–û—Å—Ç–∞–Ω–Ω—ñ –¥—ñ—ó ({len(rows)}):</b>\n\n<code>{text}</code>", parse_mode="HTML", disable_web_page_preview=True)


async def export_csv_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê–¥–º-–∫–æ–º–∞–Ω–¥–∞: –µ–∫—Å–ø–æ—Ä—Ç–∞ CSV.\n
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /export_csv <table> [days=N]
    –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã: profiles, profile_images, warnings, neaktyv_requests, access_applications, action_logs, profile_updates, antispam_events, error_logs
    """
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
        return
    if not context.args:
        await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /export_csv <table> [days=N]")
        return
    table = context.args[0]
    days = None
    if len(context.args) > 1 and context.args[1].startswith("days="):
        try:
            days = int(context.args[1].split("=",1)[1])
        except Exception:
            days = None
    try:
        filename, content = export_table_csv(table, days=days)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return
    await update.message.reply_document(document=(filename, content), caption=f"–ï–∫—Å–ø–æ—Ä—Ç {table}{' –∑–∞ ' + str(days) + ' –¥–Ω.' if days else ''}")

async def log_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê–¥–º-–∫–æ–º–∞–Ω–¥–∞: —Å–≤–æ–¥–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏.\n
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /log_stats [days=7]
    """
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
        return
    days = 7
    for a in context.args or []:
        if a.startswith("days="):
            try: days = max(1, int(a.split("=",1)[1]));
            except Exception: pass
    stats = logs_stats(days=days)
    parts = ["<b>–°–≤–æ–¥–∫–∞</b>"]
    parts.append("\n–î—ñ—ó –ø–æ —Ç–∏–ø–∞–º:")
    for k,v in stats.get("actions_by_type", []):
        parts.append(f"‚Ä¢ {k}: {v}")
    await update.message.reply_text("\n".join(parts), parse_mode="HTML")

async def broadcast_fill_profiles(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤: –ø–æ–ø—Ä–æ—Å–∏—Ç–∏ –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—ñ (—ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è)."""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    text = (
        "üì£ <b>–®–∞–Ω–æ–≤–Ω—ñ —É—á–∞—Å–Ω–∏–∫–∏!</b>\n\n"
        "–î–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–∑–∏, –ø—Ä–æ—Å–∏–º–æ –∫–æ–∂–Ω–æ–≥–æ –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ –¥–∞–Ω—ñ —á–µ—Ä–µ–∑ –±–æ—Ç–∞:\n\n"
        "1) –í—ñ–¥–∫—Ä–∏–π—Ç–µ –¥—ñ–∞–ª–æ–≥ –∑ –±–æ—Ç–æ–º —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start\n"
        "2) –ü—Ä–æ–π–¥—ñ—Ç—å –∞–Ω–∫–µ—Ç—É –¥–æ—Å—Ç—É–ø—É: –≤–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ, –æ–±–µ—Ä—ñ—Ç—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ù–ü–£, –æ–±–µ—Ä—ñ—Ç—å <b>—Å–≤–æ—î –∑–≤–∞–Ω–Ω—è</b>\n"
    "3) –ù–∞–¥—ñ—à–ª—ñ—Ç—å 2 –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏ (–ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è —Ç–∞ —Ç—Ä—É–¥–æ–≤—É –∫–Ω–∏–∂–∫—É) –∑ imgbb/imgur/postimg (–ø—Ä—è–º—ñ URL)\n\n"
        "–î—è–∫—É—î–º–æ –∑–∞ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å!"
    )
    await update.message.reply_text(text, parse_mode="HTML")

async def open_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ñ–¥–∫—Ä–∏—Ç–∏ –∞–¥–º—ñ–Ω-–º–µ–Ω—é (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)."""
    user_id = update.effective_user.id
    logger.info(f"open_admin_menu called by user {user_id}")
    
    if user_id not in ADMIN_IDS:
        logger.warning(f"Non-admin user {user_id} tried to access admin menu")
        await update.message.reply_text("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
        return
    
    logger.info(f"Opening admin menu for admin {user_id}")
    kb = ReplyKeyboardMarkup([
        ["üìù –û—Ñ–æ—Ä–º–∏—Ç–∏ –¥–æ–≥–∞–Ω—É", "/admin_help"],
        ["üîô –ó–≤–∏—á–∞–π–Ω—ñ –∫–æ–º–∞–Ω–¥–∏"],
    ], resize_keyboard=True)
    await update.message.reply_text("üõ°Ô∏è –ê–¥–º—ñ–Ω-–º–µ–Ω—é –≤—ñ–¥–∫—Ä–∏—Ç–æ.", reply_markup=kb)

async def open_user_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –º–µ–Ω—é (—É –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤)."""
    user_id = update.effective_user.id
    logger.info(f"open_user_menu called by user {user_id}")
    
    kb_rows = [["üìù –ó–∞—è–≤–∞ –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤"]]
    if user_id in ADMIN_IDS:
        kb_rows.append(["üõ°Ô∏è –ê–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∏"])
        logger.info(f"Added admin button for admin {user_id}")
    
    kb = ReplyKeyboardMarkup(kb_rows, resize_keyboard=True)
    await update.message.reply_text("üîô –ü–æ–≤–µ—Ä–Ω—É–≤—Å—è –¥–æ –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –º–µ–Ω—é.", reply_markup=kb)

def _format_profile(profile: dict) -> str:
    return (
        "üë§ <b>–ü—Ä–æ—Ñ—ñ–ª—å</b>\n\n"
        f"üÜî Telegram ID: <code>{profile['telegram_id']}</code>\n"
        f"üì± Username: @{profile['username'] or '–Ω–µ–º–∞—î'}\n"
        f"–Ü–º'—è –≤ Telegram: {profile['full_name_tg'] or '‚Äî'}\n"
        f"–Ü–º'—è —É –≥—Ä—ñ: {profile['in_game_name'] or '‚Äî'}\n"
        f"–ó–≤–∞–Ω–Ω—è: {profile['rank'] or '‚Äî'}\n"
        f"–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª: {profile['npu_department'] or '‚Äî'}\n"
        f"–†–æ–ª—å: {profile['role'] or 'user'}\n"
        f"–û–Ω–æ–≤–ª–µ–Ω–æ: {profile['updated_at'] or '‚Äî'}\n"
    )

async def user_lookup_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/user <id|@username> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º)."""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
        return
    if get_profile_by_username is None:
        await update.message.reply_text("‚ö†Ô∏è –§—É–Ω–∫—Ü—ñ—è –ø–æ—à—É–∫—É –∑–∞ username —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —Ü—å–æ–º—É –¥–µ–ø–ª–æ—ó.")
        return
    if not context.args:
        await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /user <telegram_id | @username>")
        return
    arg = context.args[0]
    profile = None
    if arg.isdigit():
        profile = get_profile(int(arg))
    else:
        profile = get_profile_by_username(arg)
    if not profile:
        await update.message.reply_text("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ñ—ñ–ª—å.")
        return
    await update.message.reply_text(_format_profile(profile), parse_mode="HTML", disable_web_page_preview=True)

async def find_profiles_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/find <—Ç–µ–∫—Å—Ç> ‚Äî –ø–æ—à—É–∫ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ –ø–æ username/–Ü–º'—è TG/–Ü–º'—è —É –≥—Ä—ñ (—Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω–∞–º)."""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
        return
    if search_profiles is None:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ—à—É–∫ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –Ω–∞ —Ü—å–æ–º—É –¥–µ–ø–ª–æ—ó.")
        return
    q = " ".join(context.args).strip()
    if not q:
        await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /find <—Ç–µ–∫—Å—Ç>")
        return
    results = search_profiles(q, limit=10)
    if not results:
        await update.message.reply_text("–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    # –ö–æ–∂–µ–Ω –ø—Ä–æ—Ñ—ñ–ª—å ‚Äî –æ–∫—Ä–µ–º–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥—ñ–π (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)
    for p in results:
        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üö´ –û–±–º–µ–∂–∏—Ç–∏ –¥–æ—Å—Ç—É–ø (–≤–∏–≥–Ω–∞—Ç–∏)", callback_data=f"admin_kick_{p['telegram_id']}"),
            ],
            [
                InlineKeyboardButton("‚ö†Ô∏è –î–æ–≥–∞–Ω–∞", callback_data=f"admin_warn_{p['telegram_id']}")
            ]
        ])
        await update.message.reply_text(_format_profile(p), reply_markup=kb, parse_mode="HTML", disable_web_page_preview=True)

async def handle_admin_user_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–∫–∞ –∞–¥–º—ñ–Ω—Å—å–∫–∏—Ö –¥—ñ–π –∑ /find: –≤–∏–≥–Ω–∞—Ç–∏ –∑ –≥—Ä—É–ø–∏ –∞–±–æ –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –¥–æ–≥–∞–Ω—É."""
    query = update.callback_query
    await query.answer()
    if query.from_user.id not in ADMIN_IDS:
        await query.edit_message_text("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
        return
    data = query.data
    if data.startswith("admin_kick_"):
        target_id = int(data.split("_")[2])
        chat_id = REPORTS_CHAT_ID
        try:
            await context.bot.ban_chat_member(chat_id=chat_id, user_id=target_id)
            await context.bot.unban_chat_member(chat_id=chat_id, user_id=target_id)
            await query.edit_message_text(f"üö´ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {target_id} –≤–∏–≥–Ω–∞–Ω–æ –∑ –≥—Ä—É–ø–∏.")
            try:
                log_action(
                    actor_id=query.from_user.id,
                    actor_username=query.from_user.username,
                    action="kick_from_group",
                    target_user_id=target_id,
                    target_username=None,
                    details=f"chat_id={chat_id}",
                )
            except Exception:
                pass
        except Exception as e:
            await query.edit_message_text(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–≥–Ω–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {target_id}: {e}")
    elif data.startswith("admin_warn_"):
        target_id = int(data.split("_")[2])
        # –û—Ç—Ä–∏–º–∞—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å, —â–æ–± –ø—ñ–¥—Å—Ç–∞–≤–∏—Ç–∏ –Ü–º'—è —Ç–∞, –∑–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ, –∑–≤–∞–Ω–Ω—è
        prof = get_profile(target_id)
        disp = None
        if prof:
            disp = display_ranked_name(prof.get('rank'), prof.get('in_game_name') or prof.get('full_name_tg') or '')
        if disp:
            context.user_data["dogana_prefill_to"] = disp
            await query.edit_message_text(
                "‚ö†Ô∏è –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–≥–∞–Ω–∏\n\n"
                f"–ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: <code>{disp}</code>\n"
                "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /dogana, —ñ –Ω–∞ –∫—Ä–æ—Ü—ñ '–ü–æ—Ä—É—à–Ω–∏–∫' –≤–≤–µ–¥—ñ—Ç—å '–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º' –∞–±–æ –≤–∫–∞–∂—ñ—Ç—å —ñ–Ω—à–µ —ñ–º'—è.",
                parse_mode="HTML"
            )
            try:
                log_action(
                    actor_id=query.from_user.id,
                    actor_username=query.from_user.username,
                    action="dogana_prefill_set",
                    target_user_id=target_id,
                    target_username=prof.get('username') if prof else None,
                    details=f"prefill={disp}",
                )
            except Exception:
                pass
        else:
            await query.edit_message_text(
                "‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ñ—ñ–ª—å –¥–ª—è –ø—Ä–µ—Ñ—ñ–ª—É. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /dogana —Ç–∞ –≤–∫–∞–∂—ñ—Ç—å —ñ–º'—è –≤—Ä—É—á–Ω—É.")

async def me_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    user = update.effective_user
    profile = get_profile(user.id)
    if not profile:
        await update.message.reply_text("‚ÑπÔ∏è –ü—Ä–æ—Ñ—ñ–ª—å —â–µ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.")
        return
    text = (
        "üë§ <b>–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å</b>\n\n"
        f"TG: @{profile['username'] or '–Ω–µ–º–∞—î'}\n"
        f"–Ü–º'—è –≤ Telegram: {profile['full_name_tg'] or '‚Äî'}\n"
        f"–Ü–º'—è —É –≥—Ä—ñ: {profile['in_game_name'] or '‚Äî'}\n"
        f"–ó–≤–∞–Ω–Ω—è: {profile['rank'] or '‚Äî'}\n"
        f"–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª: {profile['npu_department'] or '‚Äî'}\n"
        f"–†–æ–ª—å: {profile['role'] or 'user'}\n"
    )
    await update.message.reply_text(text, parse_mode="HTML")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ–≤—ñ–¥–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º —Ç–∞ –¥—ñ—è–º –±–æ—Ç–∞."""
    is_admin = update.effective_user.id in ADMIN_IDS
    text = (
        "‚ÑπÔ∏è <b>–î–æ–≤—ñ–¥–∫–∞</b>\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏</b>:\n"
        "‚Ä¢ /start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞ —Ç–∞ –ø–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é\n"
        "‚Ä¢ /help ‚Äî —Ü—è –¥–æ–≤—ñ–¥–∫–∞\n"
        "‚Ä¢ /me ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –≤–∞—à –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å\n"
    "‚Ä¢ /neaktyv ‚Äî –ø–æ–¥–∞—Ç–∏ <i>–∑–∞—è–≤—É –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤</i> (—Ç–∞–∫–æ–∂ —î –∫–Ω–æ–ø–∫–∞ –≤ –º–µ–Ω—é)\n"
    "‚Ä¢ /refill ‚Äî <i>—Ç–∏–º—á–∞—Å–æ–≤–æ</i>: –ø–µ—Ä–µ–∑–∞–ø–æ–≤–Ω–∏—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω—å –ë–î\n\n"
        "<b>–ó–∞—è–≤–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø —É –≥—Ä—É–ø—É</b>:\n"
        "1) –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start —ñ –¥–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π\n"
        "2) –í–≤–µ–¥—ñ—Ç—å <i>—ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é</i> (–ø–æ–≤–Ω—ñ—Å—Ç—é)\n"
        "3) –û–±–µ—Ä—ñ—Ç—å <i>—É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ù–ü–£</i> —ñ <i>—Å–≤–æ—î –∑–≤–∞–Ω–Ω—è</i> –∑—ñ —Å–ø–∏—Å–∫—É\n"
    "4) –ù–∞–¥—ñ—à–ª—ñ—Ç—å <i>2 –ø–æ—Å–∏–ª–∞–Ω–Ω—è</i> –Ω–∞ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏ (–ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è —ñ —Ç—Ä—É–¥–æ–≤—É –∫–Ω–∏–∂–∫—É) –∑ imgbb/imgur/postimg\n\n"
        "<blockquote>–ü–æ—Ä–∞–¥–∞: –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ <b>–ø—Ä—è–º—ñ URL</b> –∑–æ–±—Ä–∞–∂–µ–Ω—å, –∫–æ–∂–Ω–µ –∑ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞.</blockquote>\n\n"
    )
    if is_admin:
        text += (
            "<b>–ê–¥–º—ñ–Ω—Å—å–∫—ñ –∫–æ–º–∞–Ω–¥–∏</b>:\n"
            "‚Ä¢ /admin ‚Äî –∫–æ—Ä–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤\n"
            "‚Ä¢ /dogana ‚Äî –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –¥–æ–≥–∞–Ω–∏\n"
            "‚Ä¢ /user &lt;id|@username&gt; ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n"
            "‚Ä¢ /find &lt;—Ç–µ–∫—Å—Ç&gt; ‚Äî –ø–æ—à—É–∫ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ (username/—ñ–º'—è TG/—ñ–º'—è —É –≥—Ä—ñ)\n"
            "‚Ä¢ /broadcast_fill ‚Äî –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –¥–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—ñ–≤\n\n"
        )
    text += (
        "<b>–ú–æ–¥–µ—Ä–∞—Ü—ñ—è –∑–∞—è–≤ –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤</b> (–∞–¥–º—ñ–Ω–∏):\n"
        "‚Ä¢ –£ –ø—Ä–∏–≤–∞—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∞ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ <b>–û–¥–æ–±—Ä–∏—Ç–∏/–í—ñ–¥—Ö–∏–ª–∏—Ç–∏</b>\n"
        "‚Ä¢ –ü—ñ—Å–ª—è –∫–ª—ñ–∫—É –±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç—å <i>—ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞</i> –¥–ª—è –ø—ñ–¥–ø–∏—Å—É\n"
        "‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É–±–ª—ñ–∫—É—î—Ç—å—Å—è —É –≥—Ä—É–ø—ñ –∑ –∞—Ç—Ä–∏–±—É—Ü—ñ—î—é <i>–ü–µ—Ä–µ–≤—ñ—Ä—è—é—á–∏–π</i>\n\n"
        "<b>–§–æ—Ä–º–∞—Ç —ñ–º–µ–Ω—ñ</b>: –ª–∏—à–µ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏, –ø–æ–≤–Ω–µ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ.\n"
    )
    await update.message.reply_text(text, parse_mode="HTML", disable_web_page_preview=True)

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–æ–∫
    application = Application.builder().token(BOT_TOKEN).build()
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ë–î
    init_db()
    

    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("me", me_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("admin_help", admin_help_command))
    application.add_handler(CommandHandler("admin", admin_command))
    application.add_handler(CommandHandler("broadcast_fill", broadcast_fill_profiles))
    application.add_handler(CommandHandler("user", user_lookup_command))
    application.add_handler(CommandHandler("find", find_profiles_command))

    # –ü–æ–ø–µ—Ä–µ–¥–Ω—å–æ –æ–±—Ä–æ–±–ª—è—î–º–æ –≤–∏–±—ñ—Ä –ø–æ–∫–∞—Ä–∞–Ω–Ω—è (inline) –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –∫–Ω–æ–ø–∫–æ–≤–æ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞
    application.add_handler(CallbackQueryHandler(dogana_punish_selected, pattern=r"^dogana_punish_"))
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å approve_neaktyv_/reject_neaktyv_
    application.add_handler(CallbackQueryHandler(button_handler, pattern=r"^(request_access|npu_.+|rank_\d+|approve_\d+|reject_\d+)$"))
    # –ê–¥–º—ñ–Ω—Å—å–∫—ñ –∫–Ω–æ–ø–∫–∏ –∑ /find
    application.add_handler(CallbackQueryHandler(handle_admin_user_action, pattern=r"^admin_(kick|warn)_\d+$"))

    # –î—ñ–∞–ª–æ–≥–∏: –î–æ–≥–∞–Ω–∏ (–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º)
    dogana_conv = ConversationHandler(
        entry_points=[CommandHandler("dogana", dogana_start), MessageHandler(filters.Regex("^üìù –û—Ñ–æ—Ä–º–∏—Ç–∏ –¥–æ–≥–∞–Ω—É$"), dogana_start)],
        states={
            DOGANA_OFFENSE: [MessageHandler(filters.TEXT & ~filters.COMMAND, dogana_offense)],
            DOGANA_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, dogana_date)],
            DOGANA_TO: [MessageHandler(filters.TEXT & ~filters.COMMAND, dogana_to)],
            DOGANA_BY: [MessageHandler(filters.TEXT & ~filters.COMMAND, dogana_by)],
            DOGANA_PUNISH: [CallbackQueryHandler(dogana_punish_selected, pattern=r"^dogana_punish_")],
        },
        fallbacks=[CommandHandler("cancel", dogana_cancel)],
        allow_reentry=True,
    )
    application.add_handler(dogana_conv)

    # –î—ñ–∞–ª–æ–≥–∏: –ó–∞—è–≤–∞ –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤ (–≤—Å—ñ)
    neaktyv_conv = ConversationHandler(
        entry_points=[CommandHandler("neaktyv", neaktyv_start), MessageHandler(filters.Regex("^üìù –ó–∞—è–≤–∞ –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤$"), neaktyv_start)],
        states={
            NEAKTYV_TO: [MessageHandler(filters.TEXT & ~filters.COMMAND, neaktyv_to)],
            NEAKTYV_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, neaktyv_time)],
            NEAKTYV_DEPARTMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, neaktyv_dept)],
        },
        fallbacks=[CommandHandler("cancel", neaktyv_cancel)],
        allow_reentry=True,
    )
    application.add_handler(neaktyv_conv)

    # –î—ñ–∞–ª–æ–≥ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –∑–∞—è–≤ –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤
    neaktyv_moderation_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(handle_neaktyv_moderation, pattern=r"^(approve|reject)_neaktyv_\d+$")],
        states={
            NEAKTYV_APPROVAL_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_neaktyv_approval_name)],
        },
        fallbacks=[CommandHandler("cancel", cancel_neaktyv_moderation)],
        allow_reentry=True,
    )
    application.add_handler(neaktyv_moderation_conv)

    # –î—ñ–∞–ª–æ–≥ —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
    refill_conv = ConversationHandler(
        entry_points=[CommandHandler("refill", refill_start)],
        states={
            REFILL_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, refill_name)],
            REFILL_NPU: [CallbackQueryHandler(refill_select_npu, pattern=r"^refill_npu_.+")],
            REFILL_RANK: [CallbackQueryHandler(refill_select_rank, pattern=r"^refill_rank_\d+")],
            REFILL_IMAGES: [MessageHandler(filters.TEXT & ~filters.COMMAND, refill_images)],
        },
        fallbacks=[CommandHandler("cancel", neaktyv_cancel)],
        allow_reentry=True,
    )
    application.add_handler(refill_conv)

    # –ü–µ—Ä–µ–º–∏–∫–∞—á—ñ –º–µ–Ω—é –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤ (–¥–æ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–æ–±–Ω–∏–∫–∞ —Ç–µ–∫—Å—Ç—ñ–≤!)
    application.add_handler(MessageHandler(filters.Regex("^üõ°Ô∏è –ê–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∏$"), open_admin_menu))
    application.add_handler(MessageHandler(filters.Regex("^üîô –ó–≤–∏—á–∞–π–Ω—ñ –∫–æ–º–∞–Ω–¥–∏$"), open_user_menu))
    
    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –ø—Ä–æ–±–ª–µ–º –∑ –µ–º–æ–¥–∑—ñ
    application.add_handler(MessageHandler(filters.Regex(".*–ê–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∏.*"), open_admin_menu))
    application.add_handler(MessageHandler(filters.Regex(".*–ó–≤–∏—á–∞–π–Ω—ñ –∫–æ–º–∞–Ω–¥–∏.*"), open_user_menu))

    # –Ü—Å–Ω—É—é—á—ñ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_application_text))
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    
    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–∫—É –ø–æ–º–∏–ª–æ–∫ –¥–ª—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤
    async def error_handler(update, context):
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–ª–µ–Ω–∞: {context.error}")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        try:
            err = context.error
            err_type = type(err).__name__ if err else None
            message = str(err) if err else None
            import json
            update_json = None
            try:
                if update:
                    update_json = json.dumps(update.to_dict())
            except Exception:
                update_json = None
            import traceback as tb
            stack = "".join(tb.format_exception_only(type(err), err)) if err else None
            log_error(err_type, message, stack, update_json, None)
            log_action(
                actor_id=None,
                actor_username=None,
                action="error",
                target_user_id=None,
                target_username=None,
                details=f"{err_type}: {message}",
            )
        except Exception:
            pass
    application.add_handler(CommandHandler("logs", logs_command))
    application.add_handler(CommandHandler("export_csv", export_csv_command))
    application.add_handler(CommandHandler("log_stats", log_stats_command))
    
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∑ –æ–±—Ä–æ–±–∫–æ—é –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤
    try:
        application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True  # –Ü–≥–Ω–æ—Ä—É—î–º–æ —Å—Ç–∞—Ä—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        )
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É: {e}")
        raise

if __name__ == '__main__':
    main()