import os
import logging
import re
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler,
)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–º—ñ–Ω–Ω—É –æ—Ç–æ—á–µ–Ω–Ω—è BOT_TOKEN. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥—É.")

ADMIN_IDS_STR = os.getenv("ADMIN_IDS", "1648720935")
ADMIN_IDS = [int(admin_id.strip()) for admin_id in ADMIN_IDS_STR.split(',')]

GROUP_CHAT_ID = os.getenv("GROUP_CHAT_ID")  # ID –≥—Ä—É–ø–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø—Ä–æ—à–µ–Ω—å
GROUP_INVITE_LINK = "https://t.me/+RItcaiRa-KU5ZThi"  # –û—Å–Ω–æ–≤–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è (—Ä–µ–∑–µ—Ä–≤–Ω–µ)

# –î–æ–¥–∞—Ç–∫–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ–º–∏ (forum topics)
def _int_or_none(val: str | None):
    try:
        return int(val) if val is not None and val != "" else None
    except Exception:
        return None

# –û—Å–Ω–æ–≤–Ω–∏–π —á–∞—Ç –¥–ª—è –∑–≤—ñ—Ç—ñ–≤/—Ç–µ–º: –±–µ—Ä–µ–º–æ –∑ REPORTS_CHAT_ID, —ñ–Ω–∞–∫—à–µ GROUP_CHAT_ID, —ñ–Ω–∞–∫—à–µ –∑ –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ —Ç–µ–º–∏
REPORTS_CHAT_ID = _int_or_none(os.getenv("REPORTS_CHAT_ID")) or _int_or_none(os.getenv("GROUP_CHAT_ID")) or -1003191532549

# ID —Ç–µ–º –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –∑ –≤–∞—à–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å
WARNINGS_TOPIC_ID = _int_or_none(os.getenv("WARNINGS_TOPIC_ID")) or 146
AFK_TOPIC_ID = _int_or_none(os.getenv("AFK_TOPIC_ID")) or 152

# –°—Ç–∞–Ω–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
PENDING_REQUESTS = {}
USER_APPLICATIONS = {}  # –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑–∞—è–≤–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤

# –î–æ—Å—Ç—É–ø–Ω—ñ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ù–ü–£
NPU_DEPARTMENTS = {
    "dnipro": "üèõÔ∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ù–ü–£ –≤ –î–Ω—ñ–ø—Ä—ñ",
    "kharkiv": "üèõÔ∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ù–ü–£ –≤ –•–∞—Ä–∫–æ–≤—ñ", 
    "kyiv": "üèõÔ∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ù–ü–£ –≤ –ö–∏—î–≤—ñ"
}

def is_ukrainian_name(text: str) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –º—ñ—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ"""
    # –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏
    ukrainian_pattern = re.compile(r'^[–ê-–Ø–Ü–á–Ñ–∞-—è—ñ—ó—î\'\-\s]+$', re.UNICODE)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–∑–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç
    if not ukrainian_pattern.match(text.strip()):
        return False
    
    # –†–æ–∑–¥—ñ–ª—è—î–º–æ –Ω–∞ —Å–ª–æ–≤–∞ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —î –º—ñ–Ω—ñ–º—É–º 2 —Å–ª–æ–≤–∞ (—ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ)
    words = text.strip().split()
    if len(words) < 2:
        return False
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –∫–æ–∂–Ω–µ —Å–ª–æ–≤–æ –º–∞—î –º—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏
    for word in words:
        if len(word) < 2:
            return False
    
    return True

def is_valid_image_url(url: str) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î URL –≤–∞–ª—ñ–¥–Ω–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
    # –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É URL
    url_pattern = re.compile(
        r'^https?://'  # http:// –∞–±–æ https://
        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+[A-Z]{2,6}\.?|'  # –¥–æ–º–µ–Ω
        r'localhost|'  # localhost
        r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'  # IP
        r'(?::\d+)?'  # –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –ø–æ—Ä—Ç
        r'(?:/?|[/?]\S+)$', re.IGNORECASE)
    
    if not url_pattern.match(url):
        return False
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É
    image_extensions = ('.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp')
    if any(url.lower().endswith(ext) for ext in image_extensions):
        return True
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–ø—É–ª—è—Ä–Ω—ñ —Ö–æ—Å—Ç–∏–Ω–≥–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å
    image_hosts = ['imgbb.com', 'imgur.com', 'postimg.cc', 'ibb.co', 'imageban.ru', 'radikal.ru']
    if any(host in url.lower() for host in image_hosts):
        return True
    
    # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–µ—Ä–µ–∑ HTTP HEAD –∑–∞–ø–∏—Ç
    try:
        response = requests.head(url, timeout=5)
        content_type = response.headers.get('content-type', '')
        return content_type.startswith('image/')
    except:
        return False

def validate_image_urls(urls: list) -> tuple:
    """–í–∞–ª—ñ–¥—É—î —Å–ø–∏—Å–æ–∫ URL –∑–æ–±—Ä–∞–∂–µ–Ω—å"""
    valid_urls = []
    invalid_urls = []
    
    for url in urls:
        url = url.strip()
        if is_valid_image_url(url):
            valid_urls.append(url)
        else:
            invalid_urls.append(url)
    
    return valid_urls, invalid_urls

async def create_invite_link(context: ContextTypes.DEFAULT_TYPE, user_name: str) -> str:
    """–°—Ç–≤–æ—Ä—é—î –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è-–∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        # –Ø–∫—â–æ —î ID –≥—Ä—É–ø–∏, —Å—Ç–≤–æ—Ä—é—î–º–æ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        if GROUP_CHAT_ID:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è, —â–æ –¥—ñ—î 24 –≥–æ–¥–∏–Ω–∏ —Ç–∞ –º–æ–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ 1 –ª—é–¥–∏–Ω–∞
            invite_link = await context.bot.create_chat_invite_link(
                chat_id=GROUP_CHAT_ID,
                name=f"–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—è –¥–ª—è {user_name}",
                expire_date=None,  # –ë–µ–∑ –æ–±–º–µ–∂–µ–Ω–Ω—è –ø–æ —á–∞—Å—É, –∞–ª–µ –∑ –ª—ñ–º—ñ—Ç–æ–º –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—å
                member_limit=1,  # –¢—ñ–ª—å–∫–∏ –æ–¥–Ω–∞ –ª—é–¥–∏–Ω–∞ –º–æ–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏
                creates_join_request=False  # –ü—Ä—è–º–∏–π –≤—Å—Ç—É–ø –±–µ–∑ –∑–∞–ø–∏—Ç—É
            )
            logger.info(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è {user_name}: {invite_link.invite_link}")
            return invite_link.invite_link
        else:
            # –Ø–∫—â–æ –Ω–µ–º–∞—î ID –≥—Ä—É–ø–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å–Ω–æ–≤–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
            logger.warning("GROUP_CHAT_ID –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å–Ω–æ–≤–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è")
            return GROUP_INVITE_LINK
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è-–∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è: {e}")
        # –í —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å–Ω–æ–≤–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        return GROUP_INVITE_LINK

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start: —Ä—ñ–∑–Ω–∞ –ø–æ–≤–µ–¥—ñ–Ω–∫–∞ –¥–ª—è —á–ª–µ–Ω—ñ–≤ –≥—Ä—É–ø–∏ —Ç–∞ —Ç–∏—Ö, —Ö—Ç–æ —â–µ –Ω–µ –≤ –≥—Ä—É–ø—ñ"""
    user = update.effective_user

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–ª–µ–Ω—Å—Ç–≤–∞ —É –≥—Ä—É–ø—ñ
    user_is_member = False
    if REPORTS_CHAT_ID:
        try:
            member = await context.bot.get_chat_member(REPORTS_CHAT_ID, user.id)
            user_is_member = member.status in {"member", "administrator", "creator"}
        except Exception as e:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–ª–µ–Ω—Å—Ç–≤–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.id}: {e}")

    if user_is_member:
        # –ü–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –≤–∑–∞—î–º–æ–¥—ñ—ó (–∫–Ω–æ–ø–∫–∏ –ø—ñ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥—É)
        is_admin = user.id in ADMIN_IDS
        keyboard_rows = [["üìù –ó–∞—è–≤–∞ –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤"]]
        if is_admin:
            keyboard_rows.append(["üìù –û—Ñ–æ—Ä–º–∏—Ç–∏ –¥–æ–≥–∞–Ω—É"])
        reply_kb = ReplyKeyboardMarkup(keyboard_rows, resize_keyboard=True)

        text = (
            f"–í—ñ—Ç–∞—é, {user.first_name}! üëã\n\n"
            "–Ø –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏ –∑ –≤–∞–º–∏ —É –≥—Ä—É–ø—ñ. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ:"
        )
        await update.message.reply_text(text, reply_markup=reply_kb)
    else:
        # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —â–µ –Ω–µ –≤ –≥—Ä—É–ø—ñ ‚Äî —Å—Ç–∞—Ä–∞ –ª–æ–≥—ñ–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É
        keyboard = [
            [InlineKeyboardButton("üìù –ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ—Å—Ç—É–ø", callback_data="request_access")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        welcome_message = (
            f"–í—ñ—Ç–∞—é, {user.first_name}! üëã\n\n"
            "–¶–µ –±–æ—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–æ –≥—Ä—É–ø–∏ –ø–æ–ª—ñ—Ü—ñ—ó UKRAINE GTA.\n\n"
            "–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –≥—Ä—É–ø–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ —Ç–∞ –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –∑–∞—è–≤–∫—É."
        )
        await update.message.reply_text(welcome_message, reply_markup=reply_markup)

############################
# –î–û–ì–ê–ù (–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º)
############################

# –°—Ç–∞–Ω–∏ –¥–ª—è –¥—ñ–∞–ª–æ–≥—É '–¥–æ–≥–∞–Ω–∞'
DOGANA_OFFENSE, DOGANA_DATE, DOGANA_TO, DOGANA_BY, DOGANA_PUNISH = range(5)

async def dogana_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    if user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –¥—ñ—ó.")
        return ConversationHandler.END
    context.user_data["dogana_form"] = {}
    await update.message.reply_text(
        "üìù –û–§–û–†–ú–õ–ï–ù–ù–Ø –î–û–ì–ê–ù–ò\n\n"
        "üî∏ –ö—Ä–æ–∫ 1 –∑ 5: –û–ø–∏—Å –ø–æ—Ä—É—à–µ–Ω–Ω—è\n\n"
        "–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –¥–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –ø–æ—Ä—É—à–µ–Ω–Ω—è:",
        reply_markup=ReplyKeyboardRemove()
    )
    return DOGANA_OFFENSE

async def dogana_offense(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["dogana_form"]["offense"] = update.message.text.strip()
    await update.message.reply_text(
        "üìù –û–§–û–†–ú–õ–ï–ù–ù–Ø –î–û–ì–ê–ù–ò\n\n"
        "üî∏ –ö—Ä–æ–∫ 2 –∑ 5: –î–∞—Ç–∞ –ø–æ—Ä—É—à–µ–Ω–Ω—è\n\n"
        "–í–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É –ø–æ—Ä—É—à–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–† –∞–±–æ –î–î.–ú–ú:\n"
        "–ü—Ä–∏–∫–ª–∞–¥: 01.10.2025 –∞–±–æ 01.10"
    )
    return DOGANA_DATE

async def dogana_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    date_text = update.message.text.strip()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É –¥–∞—Ç–∏ (—Ü–∏—Ñ—Ä–∏ —Ç–∞ —Ç–æ—á–∫–∏)
    if not re.match(r'^\d{1,2}\.\d{1,2}(\.\d{4})?$', date_text):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏!\n\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
            "‚Ä¢ –î–î.–ú–ú.–†–†–†–† (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 01.10.2025)\n"
            "‚Ä¢ –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 01.10)\n\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
        )
        return DOGANA_DATE
    
    context.user_data["dogana_form"]["date"] = date_text
    await update.message.reply_text(
        "üìù –û–§–û–†–ú–õ–ï–ù–ù–Ø –î–û–ì–ê–ù–ò\n\n"
        "üî∏ –ö—Ä–æ–∫ 3 –∑ 5: –ü–æ—Ä—É—à–Ω–∏–∫\n\n"
        "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –æ—Å–æ–±–∏, —è–∫—ñ–π –≤–∏–¥–∞—î—Ç—å—Å—è –¥–æ–≥–∞–Ω–∞:\n"
        "(–¢—ñ–ª—å–∫–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, –ø–æ–≤–Ω–µ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ)"
    )
    return DOGANA_TO

async def dogana_to(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    name_text = update.message.text.strip()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É —ñ–º–µ–Ω—ñ
    if not re.match(r'^[–ê-–Ø–Ü–á–Ñ–∞-—è—ñ—ó—î\'\-\s\.]+$', name_text):
        await update.message.reply_text(
            "‚ùå –Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –º–∞—é—Ç—å –±—É—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é!\n\n"
            "–ü—Ä–∏–∫–ª–∞–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É:\n"
            "‚úÖ –û–ª–µ–∫—Å–∞–Ω–¥—Ä –Ü–≤–∞–Ω–µ–Ω–∫–æ\n"
            "‚úÖ –ú–∞—Ä—ñ—è –ü–µ—Ç—Ä–µ–Ω–∫–æ-–ö–æ–≤–∞–ª–µ–Ω–∫–æ\n"
            "‚úÖ –ê–Ω–Ω–∞-–ú–∞—Ä—ñ—è –°–∏–¥–æ—Ä–µ–Ω–∫–æ\n\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
        )
        return DOGANA_TO
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ —î –º—ñ–Ω—ñ–º—É–º 2 —Å–ª–æ–≤–∞
    words = name_text.split()
    if len(words) < 2:
        await update.message.reply_text(
            "‚ùå –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ!\n\n"
            "–ü—Ä–∏–∫–ª–∞–¥: –û–ª–µ–∫—Å–∞–Ω–¥—Ä –Ü–≤–∞–Ω–µ–Ω–∫–æ\n\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
        )
        return DOGANA_TO
    
    context.user_data["dogana_form"]["to_whom"] = name_text
    # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –∞–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ö—Ç–æ –≤–∏–¥–∞–≤
    admin_name = f"{update.effective_user.first_name} {update.effective_user.last_name or ''}".strip()
    await update.message.reply_text(
        "üìù –û–§–û–†–ú–õ–ï–ù–ù–Ø –î–û–ì–ê–ù–ò\n\n"
        "üî∏ –ö—Ä–æ–∫ 4 –∑ 5: –•—Ç–æ –≤–∏–¥–∞–≤\n\n"
        f"–ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: {admin_name}\n\n"
        "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –æ—Å–æ–±–∏, —è–∫–∞ –≤–∏–¥–∞—î –¥–æ–≥–∞–Ω—É, –∞–±–æ –∑–∞–ª–∏—à—Ç–µ —è–∫ —î:"
    )
    context.user_data["dogana_form"]["default_by"] = admin_name
    return DOGANA_BY

async def dogana_by(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    by_whom = text if text and text.lower() != "–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º" else context.user_data["dogana_form"].get("default_by")
    context.user_data["dogana_form"]["by_whom"] = by_whom

    # –í–∏–±—ñ—Ä –ø–æ–∫–∞—Ä–∞–Ω–Ω—è —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫–∏
    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–î–æ–≥–∞–Ω–∞", callback_data="dogana_punish_dogana"),
            InlineKeyboardButton("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", callback_data="dogana_punish_poperedzhennya"),
        ]
    ])
    await update.message.reply_text(
        "üìù –û–§–û–†–ú–õ–ï–ù–ù–Ø –î–û–ì–ê–ù–ò\n\n"
        "üî∏ –ö—Ä–æ–∫ 5 –∑ 5: –í–∏–¥ –ø–æ–∫–∞—Ä–∞–Ω–Ω—è\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –≤–∏–¥ –ø–æ–∫–∞—Ä–∞–Ω–Ω—è:",
        reply_markup=kb
    )
    return DOGANA_PUNISH

async def dogana_punish_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    kind = "–î–æ–≥–∞–Ω–∞" if query.data.endswith("dogana") else "–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è"
    form = context.user_data.get("dogana_form", {})

    text = (
        "‚ö†Ô∏è –î–û–ì–ê–ù–ê\n\n"
        f"1. –ü–æ—Ä—É—à–µ–Ω–Ω—è: {form.get('offense')}\n"
        f"2. –î–∞—Ç–∞ –ø–æ—Ä—É—à–µ–Ω–Ω—è: {form.get('date')}\n"
        f"3. –ö–æ–º—É –≤–∏–¥–∞–Ω–æ: {form.get('to_whom')}\n"
        f"4. –•—Ç–æ –≤–∏–¥–∞–≤: {form.get('by_whom')}\n"
        f"5. –ü–æ–∫–∞—Ä–∞–Ω–Ω—è: {kind}\n\n"
        f"–í—ñ–¥: @{query.from_user.username if query.from_user.username else query.from_user.first_name}"
    )
    try:
        await context.bot.send_message(
            chat_id=REPORTS_CHAT_ID,
            text=text,
            message_thread_id=WARNINGS_TOPIC_ID,
            disable_web_page_preview=True,
        )
        await query.edit_message_text("‚úÖ –î–æ–≥–∞–Ω—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É —Ç–µ–º—É.")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –¥–æ–≥–∞–Ω–∏: {e}")
        await query.edit_message_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —É —Ç–µ–º—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ —Ç–∞ ID —Ç–µ–º–∏.")
    finally:
        context.user_data.pop("dogana_form", None)
    return ConversationHandler.END

async def dogana_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.pop("dogana_form", None)
    await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

############################
# –ó–ê–Ø–í–ò –ù–ê –ù–ï–ê–ö–¢–ò–í (—É—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ)
############################

NEAKTYV_TO, NEAKTYV_TIME, NEAKTYV_DEPARTMENT = range(3)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –∑–∞—è–≤
NEAKTYV_APPROVAL_NAME = range(1)

async def neaktyv_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["neaktyv_form"] = {}
    await update.message.reply_text(
        "üìù –ü–û–î–ê–ß–ê –ó–ê–Ø–í–ò –ù–ê –ù–ï–ê–ö–¢–ò–í\n\n"
        "üî∏ –ö—Ä–æ–∫ 1 –∑ 3: –û—Ç—Ä–∏–º—É–≤–∞—á\n\n"
        "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –æ—Å–æ–±–∏, —è–∫—ñ–π –Ω–∞–¥–∞—î—Ç—å—Å—è –Ω–µ–∞–∫—Ç–∏–≤:\n"
        "(–£–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, –ø–æ–≤–Ω–µ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ)",
        reply_markup=ReplyKeyboardRemove()
    )
    return NEAKTYV_TO

async def neaktyv_to(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    name = update.message.text.strip()
    
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ —ñ–º–µ–Ω—ñ
    if not re.match(r'^[–ê-–Ø“ê–Ü–á–Ñ–Å][–∞-—è“ë—ñ—ó—î—ë\']*\s+[–ê-–Ø“ê–Ü–á–Ñ–Å][–∞-—è“ë—ñ—ó—î—ë\']*$', name):
        await update.message.reply_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è!\n\n"
            "–Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –ø–æ–≤–∏–Ω–Ω—ñ:\n"
            "‚Ä¢ –ë—É—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é\n"
            "‚Ä¢ –ü–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ –≤–µ–ª–∏–∫–∏—Ö –ª—ñ—Ç–µ—Ä\n"
            "‚Ä¢ –ú—ñ—Å—Ç–∏—Ç–∏ –ª–∏—à–µ –ª—ñ—Ç–µ—Ä–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤—ñ—Ç—É\n\n"
            "–ü—Ä–∏–∫–ª–∞–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è:\n"
            "‚úÖ –û–ª–µ–∫—Å—ñ–π –ü–µ—Ç—Ä–µ–Ω–∫–æ\n"
            "‚úÖ –ú–∞—Ä—ñ—è –ö–æ–≤–∞–ª–µ–Ω–∫–æ\n"
            "‚úÖ –î–º–∏—Ç—Ä–æ –û'–ö–æ–Ω–Ω–æ—Ä\n\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
        )
        return NEAKTYV_TO
    
    context.user_data["neaktyv_form"]["to_whom"] = name
    await update.message.reply_text(
        "üî∏ –ö—Ä–æ–∫ 2 –∑ 3: –¢–µ—Ä–º—ñ–Ω –Ω–µ–∞–∫—Ç–∏–≤—É\n\n"
        "–í–≤–µ–¥—ñ—Ç—å —Ç–µ—Ä–º—ñ–Ω –Ω–µ–∞–∫—Ç–∏–≤—É:\n"
        "(–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 2 —Ç–∏–∂–Ω—ñ, 1 –º—ñ—Å—è—Ü—å, 3 –¥–Ω—ñ)"
    )
    return NEAKTYV_TIME

async def neaktyv_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["neaktyv_form"]["duration"] = update.message.text.strip()
    await update.message.reply_text(
        "üî∏ –ö—Ä–æ–∫ 3 –∑ 3: –í—ñ–¥–¥—ñ–ª\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–¥—ñ–ª –ù–ü–£:",
        reply_markup=ReplyKeyboardMarkup(
            [[dept] for dept in NPU_DEPARTMENTS.keys()],
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )
    return NEAKTYV_DEPARTMENT

async def neaktyv_dept(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["neaktyv_form"]["department"] = update.message.text.strip()
    form = context.user_data.get("neaktyv_form", {})
    
    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
    username = update.message.from_user.username
    display_name = update.message.from_user.first_name
    author = f"@{username}" if username else display_name
    user_id = update.message.from_user.id
    
    admin_message = (
        "ÔøΩ –ù–û–í–ê –ó–ê–Ø–í–ê –ù–ê –ù–ï–ê–ö–¢–ò–í\n\n"
        f"1. –ö–æ–º—É –Ω–∞–¥–∞—î—Ç—å—Å—è: {form.get('to_whom')}\n"
        f"2. –ù–∞ —Å–∫—ñ–ª—å–∫–∏ (—á–∞—Å): {form.get('duration')}\n"
        f"3. –ü—ñ–¥—Ä–æ–∑–¥—ñ–ª: {form.get('department')}\n\n"
        f"–í—ñ–¥: {author}\n"
        f"ID –∑–∞—è–≤–Ω–∏–∫–∞: {user_id}"
    )
    
    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç–∏", callback_data=f"approve_neaktyv_{user_id}"),
            InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_neaktyv_{user_id}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –∑–∞—è–≤–∏ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
    context.bot_data[f"neaktyv_form_{user_id}"] = form.copy()
    context.bot_data[f"neaktyv_form_{user_id}"]["author"] = author
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=admin_message,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
    
    await update.message.reply_text(
        "‚úÖ –ó–∞—è–≤—É –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –¥–ª—è —Ä–æ–∑–≥–ª—è–¥—É.",
        reply_markup=ReplyKeyboardRemove()
    )
    
    context.user_data.pop("neaktyv_form", None)
    return ConversationHandler.END

async def neaktyv_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.pop("neaktyv_form", None)
    await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

############################
# –ú–û–î–ï–†–ê–¶–Ü–Ø –ó–ê–Ø–í –ù–ê –ù–ï–ê–ö–¢–ò–í
############################

async def handle_neaktyv_moderation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –∑–∞—è–≤ –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤"""
    query = update.callback_query
    await query.answer()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if query.from_user.id not in ADMIN_IDS:
        await query.edit_message_text("‚ùå –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return ConversationHandler.END
    
    # –ü–∞—Ä—Å–∏–Ω–≥ callback_data
    if query.data.startswith("approve_neaktyv_"):
        action = "approve"
        user_id = int(query.data.split("_")[2])
    elif query.data.startswith("reject_neaktyv_"):
        action = "reject"
        user_id = int(query.data.split("_")[2])
    else:
        return ConversationHandler.END
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –æ–±—Ä–æ–±–∫–∏
    context.user_data["moderation_action"] = action
    context.user_data["moderation_user_id"] = user_id
    context.user_data["original_message_id"] = query.message.message_id
    
    # –ó–∞–ø–∏—Ç—É—î–º–æ —ñ–º'—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    action_text = "–æ–¥–æ–±—Ä–µ–Ω–Ω—è" if action == "approve" else "–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è"
    await query.edit_message_text(
        f"üìù {action_text.capitalize()} –∑–∞—è–≤–∏\n\n"
        f"–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è {action_text}:\n"
        "(–£–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, –ø–æ–≤–Ω–µ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ)"
    )
    
    return NEAKTYV_APPROVAL_NAME

async def process_neaktyv_approval_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"""
    name = update.message.text.strip()
    
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ —ñ–º–µ–Ω—ñ
    if not re.match(r'^[–ê-–Ø“ê–Ü–á–Ñ–Å][–∞-—è“ë—ñ—ó—î—ë\']*\s+[–ê-–Ø“ê–Ü–á–Ñ–Å][–∞-—è“ë—ñ—ó—î—ë\']*$', name):
        await update.message.reply_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è!\n\n"
            "–Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –ø–æ–≤–∏–Ω–Ω—ñ:\n"
            "‚Ä¢ –ë—É—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é\n"
            "‚Ä¢ –ü–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ –≤–µ–ª–∏–∫–∏—Ö –ª—ñ—Ç–µ—Ä\n"
            "‚Ä¢ –ú—ñ—Å—Ç–∏—Ç–∏ –ª–∏—à–µ –ª—ñ—Ç–µ—Ä–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤—ñ—Ç—É\n\n"
            "–ü—Ä–∏–∫–ª–∞–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è:\n"
            "‚úÖ –û–ª–µ–∫—Å—ñ–π –ü–µ—Ç—Ä–µ–Ω–∫–æ\n"
            "‚úÖ –ú–∞—Ä—ñ—è –ö–æ–≤–∞–ª–µ–Ω–∫–æ\n"
            "‚úÖ –î–º–∏—Ç—Ä–æ –û'–ö–æ–Ω–Ω–æ—Ä\n\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
        )
        return NEAKTYV_APPROVAL_NAME
    
    action = context.user_data.get("moderation_action")
    user_id = context.user_data.get("moderation_user_id")
    original_message_id = context.user_data.get("original_message_id")
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ –∑–∞—è–≤–∏
    form_key = f"neaktyv_form_{user_id}"
    form = context.bot_data.get(form_key)
    
    if not form:
        await update.message.reply_text("‚ùå –î–∞–Ω—ñ –∑–∞—è–≤–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ú–æ–∂–ª–∏–≤–æ, –≤–æ–Ω–∞ –≤–∂–µ –±—É–ª–∞ –æ–±—Ä–æ–±–ª–µ–Ω–∞.")
        return ConversationHandler.END
    
    if action == "approve":
        # –û–¥–æ–±—Ä–µ–Ω–Ω—è - —Ä–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ç–∞ –ø—É–±–ª—ñ–∫—É—î–º–æ –≤ –≥—Ä—É–ø—É
        admin_edit_message = (
            "‚úÖ –ó–ê–Ø–í–ê –û–î–û–ë–†–ï–ù–ê\n\n"
            f"1. –ö–æ–º—É –Ω–∞–¥–∞—î—Ç—å—Å—è: {form.get('to_whom')}\n"
            f"2. –ù–∞ —Å–∫—ñ–ª—å–∫–∏ (—á–∞—Å): {form.get('duration')}\n"
            f"3. –ü—ñ–¥—Ä–æ–∑–¥—ñ–ª: {form.get('department')}\n\n"
            f"–í—ñ–¥: {form.get('author')}\n"
            f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {name}"
        )
        
        group_message = (
            "üü¶ –ó–ê–Ø–í–ê –ù–ê –ù–ï–ê–ö–¢–ò–í\n\n"
            f"1. –ö–æ–º—É –Ω–∞–¥–∞—î—Ç—å—Å—è: {form.get('to_whom')}\n"
            f"2. –ù–∞ —Å–∫—ñ–ª—å–∫–∏ (—á–∞—Å): {form.get('duration')}\n"
            f"3. –ü—ñ–¥—Ä–æ–∑–¥—ñ–ª: {form.get('department')}\n\n"
            f"–í—ñ–¥: {form.get('author')}\n"
            f"–ü–µ—Ä–µ–≤—ñ—Ä—è—é—á–∏–π: {name}"
        )
        
        try:
            # –†–µ–¥–∞–≥—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=original_message_id,
                text=admin_edit_message
            )
            
            # –ü—É–±–ª—ñ–∫—É—î–º–æ –≤ –≥—Ä—É–ø—É
            await context.bot.send_message(
                chat_id=REPORTS_CHAT_ID,
                text=group_message,
                message_thread_id=AFK_TOPIC_ID,
                parse_mode="Markdown"
            )
            await update.message.reply_text(f"‚úÖ –ó–∞—è–≤—É –æ–¥–æ–±—Ä–µ–Ω–æ —Ç–∞ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –≥—Ä—É–ø—ñ!")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞—è–≤–∏: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞—è–≤–∏.")
    else:
        # –í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è - —Ä–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_edit_message = (
            "‚ùå –ó–ê–Ø–í–ê –í–Ü–î–•–ò–õ–ï–ù–ê\n\n"
            f"1. –ö–æ–º—É –Ω–∞–¥–∞—î—Ç—å—Å—è: {form.get('to_whom')}\n"
            f"2. –ù–∞ —Å–∫—ñ–ª—å–∫–∏ (—á–∞—Å): {form.get('duration')}\n"
            f"3. –ü—ñ–¥—Ä–æ–∑–¥—ñ–ª: {form.get('department')}\n\n"
            f"–í—ñ–¥: {form.get('author')}\n"
            f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {name}"
        )
        
        try:
            # –†–µ–¥–∞–≥—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=original_message_id,
                text=admin_edit_message
            )
            await update.message.reply_text(f"‚ùå –ó–∞—è–≤—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è.")
    
    # –û—á–∏—â—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ
    context.bot_data.pop(form_key, None)
    context.user_data.pop("moderation_action", None)
    context.user_data.pop("moderation_user_id", None)
    context.user_data.pop("original_message_id", None)
    
    return ConversationHandler.END

async def cancel_neaktyv_moderation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó"""
    context.user_data.pop("moderation_action", None)
    context.user_data.pop("moderation_user_id", None)
    context.user_data.pop("original_message_id", None)
    await update.message.reply_text("‚ùå –ú–æ–¥–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "request_access":
        await query.edit_message_text(
            "üìù –ö—Ä–æ–∫ 1: –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ\n\n"
            "‚ö†Ô∏è –í–ê–ñ–õ–ò–í–û:\n"
            "‚Ä¢ –¢—ñ–ª—å–∫–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é\n"
            "‚Ä¢ –ü–æ–≤–Ω–µ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ\n"
            "‚Ä¢ –ë–µ–∑ —Å–∫–æ—Ä–æ—á–µ–Ω—å —Ç–∞ –∞–±—Ä–µ–≤—ñ–∞—Ç—É—Ä\n\n"
            "–ü—Ä–∏–∫–ª–∞–¥: –Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ"
        )
        context.user_data['awaiting_application'] = True
        context.user_data['step'] = 'waiting_name'
    
    elif query.data.startswith("npu_"):
        npu_code = query.data.split("_")[1]
        await select_npu_department(update, context, npu_code)
    
    elif query.data.startswith("approve_"):
        user_id = int(query.data.split("_")[1])
        await approve_request(update, context, user_id)
    
    elif query.data.startswith("reject_"):
        user_id = int(query.data.split("_")[1])
        await reject_request(update, context, user_id)

async def handle_application_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∑–∞—è–≤–æ–∫"""
    user = update.effective_user
    user_id = user.id
    
    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—ñ –ø–æ–¥–∞—á—ñ –∑–∞—è–≤–∫–∏
    if not context.user_data.get('awaiting_application'):
        return
    
    step = context.user_data.get('step', 'waiting_name')
    
    if step == 'waiting_name':
        await handle_name_input(update, context)
    elif step == 'waiting_image_urls':
        await handle_image_urls_application(update, context)

async def handle_name_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–∞"""
    user = update.effective_user
    user_id = user.id
    name_input = update.message.text.strip()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ–º'—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
    if not is_ukrainian_name(name_input):
        await update.message.reply_text(
            "‚ùå –Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –º–∞—é—Ç—å –±—É—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é!\n\n"
            "–ü—Ä–∏–∫–ª–∞–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É:\n"
            "‚úÖ –û–ª–µ–∫—Å–∞–Ω–¥—Ä –Ü–≤–∞–Ω–µ–Ω–∫–æ\n"
            "‚úÖ –ú–∞—Ä—ñ—è –ü–µ—Ç—Ä–µ–Ω–∫–æ-–ö–æ–≤–∞–ª–µ–Ω–∫–æ\n"
            "‚úÖ –ê–Ω–Ω–∞-–ú–∞—Ä—ñ—è –°–∏–¥–æ—Ä–µ–Ω–∫–æ\n\n"
            "‚ùå –ù–ï–ø—Ä–∞–≤–∏–ª—å–Ω–æ:\n"
            "‚Ä¢ Alexander Ivanov (–∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é)\n"
            "‚Ä¢ –û–ª–µ–∫—Å–∞–Ω–¥—Ä –Ü. (—Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è)\n"
            "‚Ä¢ –°–∞—à–∞ (–Ω–µ–ø–æ–≤–Ω–µ —ñ–º'—è)\n\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
        )
        return
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–º'—è —Ç–∞ –ø–æ–∫–∞–∑—É—î–º–æ –≤–∏–±—ñ—Ä –ù–ü–£
    if user_id not in USER_APPLICATIONS:
        USER_APPLICATIONS[user_id] = {
            'user': user,
            'name': None,
            'npu_department': None,
            'image_urls': [],
            'step': 'waiting_name'
        }
    
    USER_APPLICATIONS[user_id]['name'] = name_input
    context.user_data['step'] = 'waiting_npu' # FIX: Update user_data context
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –ù–ü–£
    keyboard = []
    for code, title in NPU_DEPARTMENTS.items():
        keyboard.append([InlineKeyboardButton(title, callback_data=f"npu_{code}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"‚úÖ –Ü–º'—è –ø—Ä–∏–π–Ω—è—Ç–æ: {name_input}\n\n"
        "üìù –ö—Ä–æ–∫ 2: –û–±–µ—Ä—ñ—Ç—å –≤–∞—à–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ù–ü–£\n\n"
        "‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ñ —Ç—ñ–ª—å–∫–∏ —Ü—ñ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥–ª—è UKRAINE GTA:",
        reply_markup=reply_markup
    )

async def select_npu_department(update: Update, context: ContextTypes.DEFAULT_TYPE, npu_code: str) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ù–ü–£"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    user_id = user.id
    
    if user_id not in USER_APPLICATIONS:
        await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ –∑–∞—è–≤–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–æ—á–Ω—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É –∑ /start")
        return
    
    if npu_code not in NPU_DEPARTMENTS:
        await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–≤—ñ–¥–æ–º–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ù–ü–£")
        return
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä –ù–ü–£
    USER_APPLICATIONS[user_id]['npu_department'] = NPU_DEPARTMENTS[npu_code]
    USER_APPLICATIONS[user_id]['step'] = 'waiting_image_urls'
    context.user_data['step'] = 'waiting_image_urls'
    
    await query.edit_message_text(
        f"‚úÖ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ù–ü–£ –æ–±—Ä–∞–Ω–æ: {NPU_DEPARTMENTS[npu_code]}\n\n"
        "üìù –ö—Ä–æ–∫ 3: –ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏\n\n"
        "–ü–æ—Ç—Ä—ñ–±–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏:\n"
        "1. –°–∫—Ä—ñ–Ω—à–æ—Ç –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è\n"
        "2. –°–∫—Ä—ñ–Ω—à–æ—Ç –ø–ª–∞–Ω—à–µ—Ç—É\n\n"
        "üìã –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è:\n"
        "‚Ä¢ –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏ –Ω–∞ imgbb.com, imgur.com –∞–±–æ –ø–æ–¥—ñ–±–Ω–∏–π —Å–µ—Ä–≤—ñ—Å\n"
        "‚Ä¢ –°–∫–æ–ø—ñ—é–π—Ç–µ –ø—Ä—è–º—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è\n"
        "‚Ä¢ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —ó—Ö –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º, –∫–æ–∂–Ω–µ –∑ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞\n\n"
        "–ü—Ä–∏–∫–ª–∞–¥:\n"
        "https://i.ibb.co/example1.jpg\n"
        "https://i.ibb.co/example2.png"
    )

async def handle_image_urls_application(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –∑–∞—è–≤–æ–∫"""
    user = update.effective_user
    user_id = user.id

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ –ø—Ä–æ—Ü–µ—Å—ñ –ø–æ–¥–∞—á—ñ –∑–∞—è–≤–∫–∏
    if not context.user_data.get('awaiting_application'):
        await update.message.reply_text(
            "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /start —Ç–∞ –ø–æ—á–Ω—ñ—Ç—å –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏."
        )
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –Ω–∞–¥—ñ—Å–ª–∞–≤ —Ç–µ–∫—Å—Ç
    if user_id not in USER_APPLICATIONS:
        await update.message.reply_text(
            "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏.\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É."
        )
        return

    user_data = USER_APPLICATIONS[user_id]
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –æ—á—ñ–∫—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    if user_data.get('step') != 'waiting_image_urls':
        await update.message.reply_text(
            "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏."
        )
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ —Ä–æ–∑–¥—ñ–ª—è—î–º–æ –Ω–∞ —Ä—è–¥–∫–∏
    message_text = update.message.text.strip()
    urls = [url.strip() for url in message_text.split('\n') if url.strip()]
    
    if len(urls) < 2:
        await update.message.reply_text(
            "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º—ñ–Ω—ñ–º—É–º 2 –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:\n"
            "1. –°–∫—Ä—ñ–Ω—à–æ—Ç –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è\n"
            "2. –°–∫—Ä—ñ–Ω—à–æ—Ç –ø–ª–∞–Ω—à–µ—Ç—É\n\n"
            "–ö–æ–∂–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞."
        )
        return
    
    # –í–∞–ª—ñ–¥—É—î–º–æ URL
    valid_urls, invalid_urls = validate_image_urls(urls)
    
    if invalid_urls:
        invalid_list = '\n'.join(f"‚Ä¢ {url}" for url in invalid_urls)
        await update.message.reply_text(
            f"‚ùå –î–µ—è–∫—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ:\n\n{invalid_list}\n\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Ç–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç—ñ–ª—å–∫–∏ –≤–∞–ª—ñ–¥–Ω—ñ URL –∑–æ–±—Ä–∞–∂–µ–Ω—å.\n"
            "–ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è: imgbb.com, imgur.com, postimg.cc —Ç–∞ —ñ–Ω—à—ñ."
        )
        return
    
    if len(valid_urls) < 2:
        await update.message.reply_text(
            "‚ùå –ü–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 2 –≤–∞–ª—ñ–¥–Ω–∏—Ö –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏ –Ω–∞ imgbb.com –∞–±–æ imgur.com —Ç–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ø—Ä—è–º—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è."
        )
        return

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
    user_data['image_urls'] = valid_urls
    
    await finalize_application(update, context, user_id)

def get_image_info(url: str) -> str:
    """–û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return f"üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è: {url}"

async def finalize_application(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int) -> None:
    """–ó–∞–≤–µ—Ä—à—É—î–º–æ –æ–±—Ä–æ–±–∫—É –∑–∞—è–≤–∫–∏"""
    user_data = USER_APPLICATIONS[user_id]
    user = user_data['user']

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞—è–≤–∫—É –¥–ª—è –æ–±—Ä–æ–±–∫–∏
    PENDING_REQUESTS[user_id] = {
        'user': user,
        'name': user_data['name'],
        'npu_department': user_data['npu_department'],
        'image_urls': user_data['image_urls']
    }

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await update.message.reply_text(
        "‚úÖ –í–∞—à—É –∑–∞—è–≤–∫—É –ø–æ–≤–Ω—ñ—Å—Ç—é –æ—Ç—Ä–∏–º–∞–Ω–æ!\n\n"
        f"üë§ –Ü–º'—è: {user_data['name']}\n"
        f"üèõÔ∏è –ù–ü–£: {user_data['npu_department']}\n"
        f"üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {len(user_data['image_urls'])}\n\n"
        "–û—á—ñ–∫—É–π—Ç–µ –Ω–∞ —Ä–æ–∑–≥–ª—è–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
        "–í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∫–æ–ª–∏ –∑–∞—è–≤–∫—É –±—É–¥–µ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–æ."
    )

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞—è–≤–∫—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –°—Ö–≤–∞–ª–∏—Ç–∏", callback_data=f"approve_{user_id}"),
            InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{user_id}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∑–æ–±—Ä–∞–∂–µ–Ω—å –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    images_list = "\n".join([f"{i+1}. {url}" for i, url in enumerate(user_data['image_urls'])])

    admin_message = (
        "üÜï –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø!\n\n"
        f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.first_name} {user.last_name or ''}\n"
        f"üÜî ID: {user.id}\n"
        f"üì± –ù—ñ–∫–Ω–µ–π–º: @{user.username or '–Ω–µ–º–∞—î'}\n\n"
        f"üìù –ó–∞—è–≤–∫–∞:\n"
        f"üë§ –Ü–º'—è: {user_data['name']}\n"
        f"üèõÔ∏è –ù–ü–£: {user_data['npu_department']}\n\n"
        f"üîó –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è ({len(user_data['image_urls'])}):\n{images_list}"
    )

    for admin_id in ADMIN_IDS:
        try:
            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏
            await context.bot.send_message(
                chat_id=admin_id,
                text=admin_message,
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

    # –û—á–∏—â—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    context.user_data['awaiting_application'] = False
    del USER_APPLICATIONS[user_id]

async def approve_request(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int) -> None:
    """–°—Ö–≤–∞–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏"""
    query = update.callback_query
    
    if user_id not in PENDING_REQUESTS:
        await query.edit_message_text("‚ùå –ó–∞—è–≤–∫—É –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    user_data = PENDING_REQUESTS[user_id]
    user = user_data['user']
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
    try:
        user_display_name = f"{user.first_name} {user.last_name or ''}".strip()
        if user.username:
            user_display_name += f" (@{user.username})"
        
        invite_link = await create_invite_link(context, user_display_name)
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        invite_message = (
            "üéâ –í—ñ—Ç–∞—î–º–æ!\n\n"
            "–í–∞—à—É –∑–∞—è–≤–∫—É —Å—Ö–≤–∞–ª–µ–Ω–æ! –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –¥–æ –≥—Ä—É–ø–∏ –ø–æ–ª—ñ—Ü—ñ—ó UKRAINE GTA.\n\n"
            "<blockquote>üîó –í–∞—à–µ –æ—Å–æ–±–∏—Å—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:\n"
            f"{invite_link}</blockquote>\n\n"
            "<blockquote>‚ö†Ô∏è –í–ê–ñ–õ–ò–í–û:\n"
            "‚Ä¢ –¶–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å\n"
            "‚Ä¢ –í–æ–Ω–æ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–µ - –º–æ–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –æ–¥–Ω–∞ –ª—é–¥–∏–Ω–∞\n"
            "‚Ä¢ –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –π–æ–≥–æ —ñ–Ω—à–∏–º\n"
            "‚Ä¢ –ü—ñ—Å–ª—è –≤—Å—Ç—É–ø—É –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Å—Ç–∞–Ω–µ –Ω–µ–¥—ñ–π—Å–Ω–∏–º</blockquote>"
        )
        
        await context.bot.send_message(
            chat_id=user_id,
            text=invite_message,
            disable_web_page_preview=True,
            parse_mode="HTML"
        )
        
    # (–û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –∫–æ–º–∞–Ω–¥–æ—é /start –ø—Ä–∏–±—Ä–∞–Ω–æ –∑–∞ –≤–∏–º–æ–≥–æ—é)
        
        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–æ —É—Å–ø—ñ—Ö
        await query.edit_message_text(
            f"‚úÖ –ó–∞—è–≤–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.first_name} ({user.id}) —Å—Ö–≤–∞–ª–µ–Ω–æ!\n\n"
            f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_display_name}\n"
            f"üîó –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: {invite_link[:50]}...\n"
            f"üìä –õ—ñ–º—ñ—Ç –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—å: 1 —Ä–∞–∑\n\n"
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è."
        )
        
        logger.info(f"–ó–∞—è–≤–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_display_name} ({user.id}) —Å—Ö–≤–∞–ª–µ–Ω–æ, —Å—Ç–≤–æ—Ä–µ–Ω–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: {invite_link}")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ö–≤–∞–ª–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.id}: {e}")
        await query.edit_message_text(
            f"‚ö†Ô∏è –ó–∞—è–≤–∫—É —Å—Ö–≤–∞–ª–µ–Ω–æ, –∞–ª–µ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è.\n"
            f"–ü–æ–º–∏–ª–∫–∞: {str(e)}\n\n"
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –æ—Å–Ω–æ–≤–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≥—Ä—É–ø—É."
        )
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –æ—Å–Ω–æ–≤–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —è–∫ —Ä–µ–∑–µ—Ä–≤
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=(
                    "üéâ –í—ñ—Ç–∞—î–º–æ!\n\n"
                    "–í–∞—à—É –∑–∞—è–≤–∫—É —Å—Ö–≤–∞–ª–µ–Ω–æ! –í–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä—É–ø–∏ –∑–∞ –æ—Å–Ω–æ–≤–Ω–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\n\n"
                    f"<blockquote>üîó {GROUP_INVITE_LINK}</blockquote>"
                ),
                disable_web_page_preview=True,
                parse_mode="HTML"
            )
        except Exception as e2:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–∞–≤—ñ—Ç—å –æ—Å–Ω–æ–≤–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user.id}: {e2}")
    
    # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞—è–≤–∫—É –∑—ñ —Å–ø–∏—Å–∫—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
    del PENDING_REQUESTS[user_id]

async def reject_request(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int) -> None:
    """–í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏"""
    query = update.callback_query
    
    if user_id not in PENDING_REQUESTS:
        await query.edit_message_text("‚ùå –ó–∞—è–≤–∫—É –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    user_data = PENDING_REQUESTS[user_id]
    user = user_data['user']
    
    # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=(
                "üòî –ù–∞ –∂–∞–ª—å, –≤–∞—à—É –∑–∞—è–≤–∫—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.\n\n"
                "–í–∏ –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ, "
                "–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤—à–∏ –∫–æ–º–∞–Ω–¥—É /start."
            )
        )
        
        await query.edit_message_text(
            f"‚ùå –ó–∞—è–≤–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.first_name} ({user.id}) –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.\n"
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–æ."
        )
    except Exception as e:
        await query.edit_message_text(
            f"‚ö†Ô∏è –ó–∞—è–≤–∫—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ, –∞–ª–µ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É: {e}"
        )
    
    # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞—è–≤–∫—É –∑—ñ —Å–ø–∏—Å–∫—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
    del PENDING_REQUESTS[user_id]

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    
    pending_count = len(PENDING_REQUESTS)
    await update.message.reply_text(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"–ó–∞—è–≤–æ–∫ –≤ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ: {pending_count}"
    )

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–æ–∫
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin_command))

    # –ü–æ–ø–µ—Ä–µ–¥–Ω—å–æ –æ–±—Ä–æ–±–ª—è—î–º–æ –≤–∏–±—ñ—Ä –ø–æ–∫–∞—Ä–∞–Ω–Ω—è (inline) –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –∫–Ω–æ–ø–∫–æ–≤–æ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞
    application.add_handler(CallbackQueryHandler(dogana_punish_selected, pattern=r"^dogana_punish_"))
    application.add_handler(CallbackQueryHandler(button_handler))

    # –î—ñ–∞–ª–æ–≥–∏: –î–æ–≥–∞–Ω–∏ (–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º)
    dogana_conv = ConversationHandler(
        entry_points=[CommandHandler("dogana", dogana_start), MessageHandler(filters.Regex("^üìù –û—Ñ–æ—Ä–º–∏—Ç–∏ –¥–æ–≥–∞–Ω—É$"), dogana_start)],
        states={
            DOGANA_OFFENSE: [MessageHandler(filters.TEXT & ~filters.COMMAND, dogana_offense)],
            DOGANA_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, dogana_date)],
            DOGANA_TO: [MessageHandler(filters.TEXT & ~filters.COMMAND, dogana_to)],
            DOGANA_BY: [MessageHandler(filters.TEXT & ~filters.COMMAND, dogana_by)],
            DOGANA_PUNISH: [CallbackQueryHandler(dogana_punish_selected, pattern=r"^dogana_punish_")],
        },
        fallbacks=[CommandHandler("cancel", dogana_cancel)],
        allow_reentry=True,
    )
    application.add_handler(dogana_conv)

    # –î—ñ–∞–ª–æ–≥–∏: –ó–∞—è–≤–∞ –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤ (–≤—Å—ñ)
    neaktyv_conv = ConversationHandler(
        entry_points=[CommandHandler("neaktyv", neaktyv_start), MessageHandler(filters.Regex("^üìù –ó–∞—è–≤–∞ –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤$"), neaktyv_start)],
        states={
            NEAKTYV_TO: [MessageHandler(filters.TEXT & ~filters.COMMAND, neaktyv_to)],
            NEAKTYV_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, neaktyv_time)],
            NEAKTYV_DEPARTMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, neaktyv_dept)],
        },
        fallbacks=[CommandHandler("cancel", neaktyv_cancel)],
        allow_reentry=True,
    )
    application.add_handler(neaktyv_conv)

    # –î—ñ–∞–ª–æ–≥ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –∑–∞—è–≤ –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤
    neaktyv_moderation_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(handle_neaktyv_moderation, pattern=r"^(approve|reject)_neaktyv_\d+$")],
        states={
            NEAKTYV_APPROVAL_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_neaktyv_approval_name)],
        },
        fallbacks=[CommandHandler("cancel", cancel_neaktyv_moderation)],
        allow_reentry=True,
    )
    application.add_handler(neaktyv_moderation_conv)

    # –Ü—Å–Ω—É—é—á—ñ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_application_text))
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    
    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–∫—É –ø–æ–º–∏–ª–æ–∫ –¥–ª—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤
    async def error_handler(update, context):
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–ª–µ–Ω–∞: {context.error}")
    
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∑ –æ–±—Ä–æ–±–∫–æ—é –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤
    try:
        application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True  # –Ü–≥–Ω–æ—Ä—É—î–º–æ —Å—Ç–∞—Ä—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        )
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É: {e}")
        raise

if __name__ == '__main__':
    main()