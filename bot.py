
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
BOT_TOKEN = "7652276422:AAGC-z7Joic3m7cFKXVdafvKvaqTZ3VZsBo"
ADMIN_IDS = [1648720935]  # –î–æ–¥–∞–π—Ç–µ ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: [123456789, 987654321]
GROUP_INVITE_LINK = ""  # –î–æ–¥–∞–π—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≥—Ä—É–ø—É

# –°—Ç–∞–Ω–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
PENDING_REQUESTS = {}
USER_APPLICATIONS = {}  # –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑–∞—è–≤–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    user = update.effective_user
    
    keyboard = [
        [InlineKeyboardButton("üìù –ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ—Å—Ç—É–ø", callback_data="request_access")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_message = (
        f"–í—ñ—Ç–∞—é, {user.first_name}! üëã\n\n"
        "–¶–µ –±–æ—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–æ –≥—Ä—É–ø–∏ –ø–æ–ª—ñ—Ü—ñ—ó UKRAINE GTA.\n\n"
        "–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –≥—Ä—É–ø–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ —Ç–∞ –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –∑–∞—è–≤–∫—É."
    )
    
    await update.message.reply_text(welcome_message, reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "request_access":
        await query.edit_message_text(
            "üìù –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é:\n\n"
            "1. –í–∞—à–µ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ\n"
            "2. –ù–ü–£ –º—ñ—Å—Ç–∞\n\n"
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º."
        )
        context.user_data['awaiting_application'] = True
    
    elif query.data.startswith("approve_"):
        user_id = int(query.data.split("_")[1])
        await approve_request(update, context, user_id)
    
    elif query.data.startswith("reject_"):
        user_id = int(query.data.split("_")[1])
        await reject_request(update, context, user_id)

async def handle_text_application(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –∑–∞—è–≤–æ–∫ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    if not context.user_data.get('awaiting_application'):
        return

    user = update.effective_user
    user_id = user.id

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ —â–µ –Ω–µ —ñ—Å–Ω—É—î
    if user_id not in USER_APPLICATIONS:
        USER_APPLICATIONS[user_id] = {
            'user': user,
            'text': None,
            'photos': [],
            'step': 'waiting_text'
        }

    USER_APPLICATIONS[user_id]['text'] = update.message.text
    USER_APPLICATIONS[user_id]['step'] = 'waiting_photos'

    await update.message.reply_text(
        "‚úÖ –¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –æ—Ç—Ä–∏–º–∞–Ω–æ!\n\n"
        "–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏:\n"
        "1. –°–∫—Ä—ñ–Ω—à–æ—Ç –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è\n"
        "2. –°–∫—Ä—ñ–Ω—à–æ—Ç –ø–ª–∞–Ω—à–µ—Ç—É\n\n"
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —ó—Ö –æ–∫—Ä–µ–º–∏–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ –∞–±–æ —Ä–∞–∑–æ–º."
    )

async def handle_photo_application(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞—è–≤–æ–∫"""
    user = update.effective_user
    user_id = user.id

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ –ø—Ä–æ—Ü–µ—Å—ñ –ø–æ–¥–∞—á—ñ –∑–∞—è–≤–∫–∏
    if not context.user_data.get('awaiting_application'):
        await update.message.reply_text(
            "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /start —Ç–∞ –ø–æ—á–Ω—ñ—Ç—å –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏."
        )
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –Ω–∞–¥—ñ—Å–ª–∞–≤ —Ç–µ–∫—Å—Ç
    if user_id not in USER_APPLICATIONS:
        await update.message.reply_text(
            "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏.\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É."
        )
        return

    user_data = USER_APPLICATIONS[user_id]

    # –î–æ–¥–∞—î–º–æ —Ñ–æ—Ç–æ –¥–æ —Å–ø–∏—Å–∫—É
    if update.message.photo:
        photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º–æ —Ñ–æ—Ç–æ –Ω–∞–π–≤–∏—â–æ—ó —è–∫–æ—Å—Ç—ñ
        user_data['photos'].append(photo)

        current_count = len(user_data['photos'])
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –≤–∂–µ 2 —Ñ–æ—Ç–æ
        if current_count >= 2:
            await finalize_application(update, context, user_id)
        else:
            photos_needed = 2 - current_count
            await update.message.reply_text(
                f"‚úÖ –§–æ—Ç–æ {current_count} –∑ 2 –æ—Ç—Ä–∏–º–∞–Ω–æ! –ó–∞–ª–∏—à–∏–ª–æ—Å—å –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —â–µ {photos_needed} —Ñ–æ—Ç–æ."
            )

def get_photo_info(photo) -> str:
    """–û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ñ–æ—Ç–æ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    file_id = photo.file_id
    width = photo.width
    height = photo.height
    file_size = photo.file_size

    return f"üì∑ –§–æ—Ç–æ {width}x{height}, {file_size} bytes (ID: {file_id[:20]}...)"

async def finalize_application(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int) -> None:
    """–ó–∞–≤–µ—Ä—à—É—î–º–æ –æ–±—Ä–æ–±–∫—É –∑–∞—è–≤–∫–∏"""
    user_data = USER_APPLICATIONS[user_id]
    user = user_data['user']

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞—è–≤–∫—É –¥–ª—è –æ–±—Ä–æ–±–∫–∏
    PENDING_REQUESTS[user_id] = {
        'user': user,
        'application': user_data['text'],
        'photos': user_data['photos']
    }

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await update.message.reply_text(
        "‚úÖ –í–∞—à—É –∑–∞—è–≤–∫—É –ø–æ–≤–Ω—ñ—Å—Ç—é –æ—Ç—Ä–∏–º–∞–Ω–æ!\n\n"
        f"üìù –¢–µ–∫—Å—Ç: –æ—Ç—Ä–∏–º–∞–Ω–æ\n"
        f"üì∑ –§–æ—Ç–æ: {len(user_data['photos'])} –∑ 2\n\n"
        "–û—á—ñ–∫—É–π—Ç–µ –Ω–∞ —Ä–æ–∑–≥–ª—è–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
        "–í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∫–æ–ª–∏ –∑–∞—è–≤–∫—É –±—É–¥–µ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–æ."
    )

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞—è–≤–∫—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –°—Ö–≤–∞–ª–∏—Ç–∏", callback_data=f"approve_{user_id}"),
            InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{user_id}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    admin_message = (
        "üÜï –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø!\n\n"
        f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.first_name} {user.last_name or ''}\n"
        f"üÜî ID: {user.id}\n"
        f"üì± –ù—ñ–∫–Ω–µ–π–º: @{user.username or '–Ω–µ–º–∞—î'}\n\n"
        f"üìù –ó–∞—è–≤–∫–∞:\n{user_data['text']}\n\n"
        f"üì∑ –û—Ç—Ä–∏–º–∞–Ω–æ {len(user_data['photos'])} —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤"
    )

    for admin_id in ADMIN_IDS:
        try:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –º–µ–¥—ñ–∞–≥—Ä—É–ø—É –∑ —Ñ–æ—Ç–æ
            if user_data['photos']:
                media_group = []
                for i, photo in enumerate(user_data['photos']):
                    caption = f"–°–∫—Ä—ñ–Ω—à–æ—Ç {i+1} –≤—ñ–¥ {user.first_name} ({user.id})" if i == 0 else f"–°–∫—Ä—ñ–Ω—à–æ—Ç {i+1}"
                    media_group.append(
                        InputMediaPhoto(
                            media=photo.file_id,
                            caption=caption
                        )
                    )

                # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –º–µ–¥—ñ–∞–≥—Ä—É–ø—É
                await context.bot.send_media_group(
                    chat_id=admin_id,
                    media=media_group
                )

            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏
            await context.bot.send_message(
                chat_id=admin_id,
                text=admin_message,
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

    # –û—á–∏—â—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    context.user_data['awaiting_application'] = False
    del USER_APPLICATIONS[user_id]

async def approve_request(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int) -> None:
    """–°—Ö–≤–∞–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏"""
    query = update.callback_query
    
    if user_id not in PENDING_REQUESTS:
        await query.edit_message_text("‚ùå –ó–∞—è–≤–∫—É –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    user_data = PENDING_REQUESTS[user_id]
    user = user_data['user']
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    try:
        invite_message = (
            "üéâ –í—ñ—Ç–∞—î–º–æ!\n\n"
            "–í–∞—à—É –∑–∞—è–≤–∫—É —Å—Ö–≤–∞–ª–µ–Ω–æ! –í–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä—É–ø–∏ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∏–∂—á–µ:\n\n"
        )
        
        if GROUP_INVITE_LINK:
            invite_message += f"üîó {GROUP_INVITE_LINK}"
            await context.bot.send_message(
                chat_id=user_id,
                text=invite_message
            )
        else:
            await context.bot.send_message(
                chat_id=user_id,
                text=invite_message + "‚ö†Ô∏è –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è."
            )
        
        await query.edit_message_text(
            f"‚úÖ –ó–∞—è–≤–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.first_name} ({user.id}) —Å—Ö–≤–∞–ª–µ–Ω–æ!\n"
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≥—Ä—É–ø—É."
        )
    except Exception as e:
        await query.edit_message_text(
            f"‚ö†Ô∏è –ó–∞—è–≤–∫—É —Å—Ö–≤–∞–ª–µ–Ω–æ, –∞–ª–µ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É: {e}"
        )
    
    # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞—è–≤–∫—É –∑—ñ —Å–ø–∏—Å–∫—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
    del PENDING_REQUESTS[user_id]

async def reject_request(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int) -> None:
    """–í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏"""
    query = update.callback_query
    
    if user_id not in PENDING_REQUESTS:
        await query.edit_message_text("‚ùå –ó–∞—è–≤–∫—É –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    user_data = PENDING_REQUESTS[user_id]
    user = user_data['user']
    
    # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=(
                "üòî –ù–∞ –∂–∞–ª—å, –≤–∞—à—É –∑–∞—è–≤–∫—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.\n\n"
                "–í–∏ –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ, "
                "–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤—à–∏ –∫–æ–º–∞–Ω–¥—É /start."
            )
        )
        
        await query.edit_message_text(
            f"‚ùå –ó–∞—è–≤–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.first_name} ({user.id}) –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.\n"
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–æ."
        )
    except Exception as e:
        await query.edit_message_text(
            f"‚ö†Ô∏è –ó–∞—è–≤–∫—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ, –∞–ª–µ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É: {e}"
        )
    
    # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞—è–≤–∫—É –∑—ñ —Å–ø–∏—Å–∫—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
    del PENDING_REQUESTS[user_id]

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    
    pending_count = len(PENDING_REQUESTS)
    await update.message.reply_text(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"–ó–∞—è–≤–æ–∫ –≤ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ: {pending_count}"
    )

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–æ–∫
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin_command))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_application))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo_application))
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
